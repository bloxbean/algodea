{
  parserClass="com.bloxbean.algorand.idea.language.parser.TEALParser"
  parserUtilClass="com.bloxbean.algorand.idea.language.psi.impl.TEALParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="TEAL"
  psiImplClassSuffix="Impl"
  psiPackage="com.bloxbean.algorand.idea.language.psi"
  psiImplPackage="com.bloxbean.algorand.idea.language.psi.impl"

  elementTypeHolderClass="com.bloxbean.algorand.idea.language.psi.TEALTypes"
  elementTypeClass="com.bloxbean.algorand.idea.language.psi.TEALElementType"
  tokenTypeClass="com.bloxbean.algorand.idea.language.psi.TEALTokenType"

  psiImplUtilClass="com.bloxbean.algorand.idea.language.psi.impl.TEALPsiImplUtil"

  tokens = [
    NL = 'regexp:\r\n'
    EOF = 'regexp:\Z'
    SPACE='regexp:\s+'
    COMMENT='regexp://.*'


//   UINT8='regexp:([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])'
//   UINT8='regexp:^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$'

    //TODO
//    IDENTIFIER = 'regexp:[\.\_\-A-Za-z0-9]+'
//       // literals
//        l_identifier="regexp:[a-zA-Z_][a-zA-Z_$0-9]*"
//        l_identifier_text="regexp:\`[^`]+\`"
//        l_decimal="regexp:(0|[1-9][0-9]*)\.[0-9]+"
//        l_integer="regexp:0|[1-9][0-9]*"
        l_string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    LOADING_OP = "regexp:(intcblock|intc|intc_0|intc_1|intc_2|intc_3|bytecblock|bytec|bytec_0|bytec_1|bytec_2|bytec_3|arg|arg_0|arg_1|arg_2|arg_3|global|load|store)"
    FLOWCONTROL_OP = "regexp:(err|return|pop|dup|dup2|bnz|bz|b)"
    STATEACCESS_OP = "regexp:(balance|app_opted_in|app_local_get|app_local_get_ex|app_global_get|app_global_get_ex|app_local_put|app_global_put|app_local_del|app_global_del|asset_holding_get|asset_params_get)"

    TXN_LOADING_OP = 'regexp:(txn|gtxn|txna|gtxna)'

  //Operations
    SHA256              = 'sha256'
    KECCAK256           = 'keccak256'
    SHA512_256          = 'sha512_256'
    ED25519VERIFY       = 'ed25519verify'
    PLUS                = '+'
    MINUS               = '-'
    DIVIDE              = '/'
    TIMES               = '*'
    LESSTHAN            = '<'
    GREATERTHAN         = '>'
    LESSTHANEQUAL       = '<='
    GREATERTHANEQUAL    = '>='

    LOGICAL_AND         = '&&'
    LOGICAL_OR          = '||'
    LOGICAL_EQUAL       = '=='
    LOGICAL_NOTEQUAL    = '!='

    NOT                 = '!'
    LEN                 = 'len'
    ITOB                = 'itob'
    BTOI                = 'btoi'

    MODULO              = '%'
    BITWISE_OR          = '|'
    BITWISE_AND         = '&'
    BITWISE_XOR         = '^'
    BITWISE_INVERT      = '~'

    MULW                = 'mulw'
    ADDW                = 'addw'
    CONCAT              = 'concat'
    SUBSTRING           = 'substring'
    SUBSTRING3          = 'substring3'

    //Named Integer Constants
    NAMED_INTEGER_CONSTANT = 'regexp:(NoOp|OptIn|CloseOut|ClearState|UpdateApplication|DeleteApplication)'

    //TypeEnum constants
    TYPENUM_CONSTANT = 'regexp:(unknown|pay|keyreg|acfg|axfer|afrz|appl)'

    //Global Fields
    GLOBAL_FIELD        = 'regexp:(MinTxnFee|MinBalance|MaxTxnLife|ZeroAddress|GroupSize|LogicSigVersion|Round|LatestTimestamp|CurrentApplicationID)'

    //Asset Fields
    ASSET_HOLDING_GET_FIELD      = 'regexp:(AssetBalance|AssetFrozen)'
    ASSET_PARAMS_GET_FIELD       = 'regexp:(AssetTotal|AssetDecimals|AssetDefaultFrozen|AssetUnitName|AssetName|AssetURL|AssetMetadataHash|AssetManager|AssetReserve|AssetFreeze|AssetClawback)'

    VERSION = "version"

    //pseudo opcodes
    INT = "int"
    BYTE = "byte"
    ADDR = "addr"

    OCTAL ='regexp:(0)[0-9]+'

    NUMBER ='regexp:\d+(\.\d*)?'

    HEX ='regexp:(0x|0X)[a-fA-F0-9]*'

    COLON = ":"

    ID     = 'regexp:([a-zA-Z_?]+[a-zA-Z0-9_$.#@~?]*)'

    BASE32 ='regexp:([A-Z2-7]{8})*([A-Z2-7]{2}={6}|[A-Z2-7]{4}={4}|[A-Z2-7]{5}={3}|[A-Z2-7]{7}=)?'
    BASE64 = 'regexp:[-A-Za-z0-9+=]{1,50}|=[^=]|={3}'

  ]
}

tealFile ::= program
program ::= [pragma NL*] statement*

pragma ::= "#pragma" VERSION pragma_version {pin=1 recoverWhile=statement_recover}
pragma_version ::= NUMBER
statement ::= COMMENT
                    | LoadingOperation
                    | FlowControlOperation
                    | StateAccessOperation
                    | GeneralOperation
                    | pseudo_op
                    | branch
                    | NL
                    | EOF {name= "TEAL OpCode" recoverWhile=statement_recover }

private statement_recover ::= !(
                    COMMENT
                                        | LoadingOperation
                                        | FlowControlOperation
                                        | StateAccessOperation
                                        | GeneralOperation
                                        | pseudo_op
                                        | branch
                                        | NL
                                        | EOF
)

branch ::= ID COLON

pseudo_op ::= int_statement | byte_statement | addr_statement
private int_statement ::= INT (HEX | OCTAL | NUMBER | NAMED_INTEGER_CONSTANT | TYPENUM_CONSTANT) {pin=1}

//TODO No strict check for byte pseudo opcode for now
private byte_base64_encoding_type ::=  'base64' | 'b64'
private byte_base64_encoding_type_values ::=  byte_base64_encoding_type BASE64
private byte_base64encoding_type_values_function_type ::=  byte_base64_encoding_type '(' BASE64 ')'

private byte_base32_encoding_type ::=  'base32' | 'b32'
private byte_base32_encoding_type_values ::=  byte_base32_encoding_type BASE32
private byte_base32encoding_type_values_function_type ::=  byte_base32_encoding_type '(' BASE32 ')'

byte_statement ::= BYTE (l_string | HEX | byte_base64_encoding_type_values | byte_base64encoding_type_values_function_type | byte_base32_encoding_type_values | byte_base32encoding_type_values_function_type | ID) {pin=1}

addr_param ::= ID {name= "Algo address"}
addr_statement ::= ADDR addr_param {pin=1}

LoadingOperation ::=  'intcblock'
                                  | intcOperation
                                  | 'intc_0'
                                  | 'intc_1'
                                  | 'intc_2'
                                  | 'intc_3'
                                  
                                  | 'bytecblock'
                                  | bytecOperation
                                  | 'bytec_0'
                                  | 'bytec_1'
                                  | 'bytec_2'
                                  | 'bytec_3'
                                  | argOperation
                                  | 'arg_0'
                                  | 'arg_1'
                                  | 'arg_2'
                                  | 'arg_3'
                                  | globalOperation
                                  | loadOperation
                                  | storeOperation

                                  | txnLoadingOperation
                                  | gtxnLoadingOperation
                                  | txnaLoadingOperation
                                  | gtxnaLoadingOperation {pin=1}

private intcOperation ::= 'intc' NUMBER {pin=1}
private bytecOperation ::= 'bytec' NUMBER {pin=1}
globalOpCode ::= 'global'
private globalOperation ::= globalOpCode (NUMBER | GLOBAL_FIELD) {pin=1}
private loadOperation ::= 'load' NUMBER {pin=1}
private storeOperation ::= 'store' NUMBER {pin=1}

private TXN_OPCODE ::= 'txn'
private GTXN_OPCODE ::= 'gtxn'
private TXNA_OPCODE ::= 'txna'
private GTXNA_OPCODE ::= 'gtxna';

private txnLoadingOperation ::= TXN_OPCODE (NUMBER | TxnFieldArg) {pin=1}
private gtxnLoadingOperation ::= GTXN_OPCODE NUMBER (NUMBER | TxnFieldArg) {pin=1}

private txnaLoadingOperation ::= TXNA_OPCODE (NUMBER | TxnFieldArg) NUMBER {pin=1}
private gtxnaLoadingOperation ::= GTXNA_OPCODE NUMBER (NUMBER | TxnFieldArg) NUMBER {pin=1}

private argOperation ::= 'arg' NUMBER {pin=1}


private TxnFieldArg ::= 'Sender'| 'Fee'| 'FirstValid'| 'FirstValidTime'| 'LastValid'| 'Note'| 'Lease'| 'Receiver'| 'Amount'
                       | 'CloseRemainderTo'|'VotePK'|'SelectionPK'|'VoteFirst'|'VoteLast'|'VoteKeyDilution'|'Type'
                       | 'TypeEnum'|'XferAsset'|'AssetAmount'|'AssetSender'|'AssetReceiver'|'AssetCloseTo'|'GroupIndex'
                       | 'TxID'|'ApplicationID'|'OnCompletion'|'ApplicationArgs'|'NumAppArgs'|'Accounts'|'NumAccounts'
                       |'ApprovalProgram'|'ClearStateProgram'|'RekeyTo'|'ConfigAsset'|'ConfigAssetTotal'|'ConfigAssetDecimals'
                       | 'ConfigAssetDefaultFrozen'|'ConfigAssetUnitName'|'ConfigAssetName'|'ConfigAssetURL'|'ConfigAssetMetadataHash'
                       | 'ConfigAssetManager'|'ConfigAssetReserve'|'ConfigAssetFreeze'|'ConfigAssetClawback'|'FreezeAsset'
                       | 'FreezeAssetAccount'|'FreezeAssetFrozen'

GeneralOperation                   ::= SHA256
                                     | KECCAK256
                                     | SHA512_256
                                     | ED25519VERIFY
                                     | PLUS
                                     | MINUS
                                     | DIVIDE
                                     | TIMES
                                     | LESSTHAN
                                     | GREATERTHAN
                                     | LESSTHANEQUAL
                                     | GREATERTHANEQUAL
                                     | LOGICAL_AND
                                     | LOGICAL_OR
                                     | LOGICAL_EQUAL
                                     | LOGICAL_NOTEQUAL
                                     | NOT
                                     | LEN
                                     | ITOB
                                     | BTOI
                                     | MODULO
                                     | BITWISE_OR
                                     | BITWISE_AND
                                     | BITWISE_XOR
                                     | BITWISE_INVERT
                                     | MULW
                                     | ADDW
                                     | CONCAT
                                     | substringOperation
                                     | SUBSTRING3

substringOperation ::= SUBSTRING NUMBER NUMBER {pin=1}

FlowControlOperation ::= 'err' | 'return' | 'pop' | 'dup' | 'dup2'
                                | branchOperation {pin=1}

branchOperation ::= ('bnz' | 'bz' | 'b') ID {pin=1}

StateAccessOperation ::=  'balance' | 'app_opted_in' | 'app_local_get'| 'app_local_get_ex' | 'app_global_get'
                            | 'app_global_get_ex'| 'app_local_put'| 'app_global_put'| 'app_local_del'
                            | 'app_global_del'
                            | assetHoldingGetOperation
                            | assetParamsGetOperation

assetHoldingGetOperation ::= assetHoldingGetOP (NUMBER | ASSET_HOLDING_GET_FIELD) {pin=1}
assetParamsGetOperation ::=  assetParamsGetOp (NUMBER | ASSET_PARAMS_GET_FIELD) {pin=1}
assetHoldingGetOP    ::= 'asset_holding_get'
assetParamsGetOp     ::= 'asset_params_get'