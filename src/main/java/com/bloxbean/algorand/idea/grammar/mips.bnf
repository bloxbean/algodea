/*
 * Copyright 2017 Niklas Persson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{
  parserClass             = 'com.equadon.intellij.mips.lang.parser._MipsParser'

  extends                 = 'com.equadon.intellij.mips.lang.psi.impl.MipsElementImpl'
  implements              = 'com.equadon.intellij.mips.lang.psi.MipsNamedElement'

  psiClassPrefix          = 'Mips'
  psiImplClassSuffix      = 'Impl'
  psiPackage              = 'com.equadon.intellij.mips.lang.psi'
  psiImplPackage          = 'com.equadon.intellij.mips.lang.psi.impl'

  elementTypeHolderClass  = 'com.equadon.intellij.mips.lang.psi.MipsElementTypes'
  elementTypeClass        = 'com.equadon.intellij.mips.lang.psi.MipsElementType'
  tokenTypeClass          = 'com.equadon.intellij.mips.lang.psi.MipsTokenType'
}

mipsFile ::= statementList

private statementList ::= statement*

private statement ::= label_definition
                    | directive_statement
                    | instruction
                    | COMMA
                    | EOL

/** Labels */
label_definition ::= label_identifier COLON
{
  pin = 2
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsLabelDefinitionMixin'
  methods = [getName setName getPresentation]
}

label_identifier ::= IDENTIFIER | OPERATOR
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsLabelIdentifierMixin'
  methods = [getName setName]
}

/** Directives */
directive_statement ::= DIRECTIVE directive_arg*
{
  pin = 1
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsDirectiveMixin'
  methods = [getName setName getNumbers getIdentifier getString]
}

directive_arg   ::= number_range
                  | number_list
                  | string_literal
                  | IDENTIFIER
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsDirectiveArgMixin'
  methods = [isNumber getNumber isIdentifier isString]
}

private number_list ::= number_literal (delimiter+ number_literal)*
{
  pin = 1
}

number_range ::= number_literal COLON number_literal
{
  pin = 3
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsNumberRangeMixin'
  methods = [getRangeStart getRangeEnd]
}

/** Instructions */
instruction ::= OPERATOR instruction_args*
{
  pin = 1
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsInstructionMixin'
  methods = [getOperator getArguments hasArguments]
}

private instruction_args ::= instruction_arg (delimiter+ instruction_arg)*
{
  pin = 1
}

instruction_arg ::= register_literal
                  | number_literal
                  | IDENTIFIER
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsInstructionArgMixin'
  methods = [isRegister isNumber isIdentifier]
}

/** Literals **/
number_literal ::= integer_literal | REAL_NUMBER
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsNumberLiteralMixin'
  methods = [isHex isInteger5 isInteger16 isInteger16u isInteger32 isReal]
}

private integer_literal  ::= INTEGER_5
                           | INTEGER_16
                           | INTEGER_16U
                           | INTEGER_32

register_literal ::= register_offset? delimiter* LPAREN delimiter* register_identifier delimiter* RPAREN
                  | register_identifier
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsRegisterLiteralMixin'
  methods = [getName setName hasOffset getOffset]
}

private register_identifier ::= REGISTER_NUMBER
                             | REGISTER_NAME
                             | FP_REGISTER_NAME

register_offset ::= IDENTIFIER (delimiter* (PLUS | MINUS) delimiter* number_literal)?
                  | number_literal
{
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsRegisterOffsetMixin'
  methods = [getLabel getImmediate]
}

string_literal ::= LQUOTE QUOTED_STRING RQUOTE
{
  pin = 3
  mixin = 'com.equadon.intellij.mips.lang.psi.mixins.MipsStringLiteralMixin'
  methods = [getText]
}

private delimiter ::= ' ' | '\t' | COMMA
