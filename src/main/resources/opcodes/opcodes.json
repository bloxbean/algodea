 [
    {
      "op": "err",
      "opcode": "0x00",
      "pops": [],
      "pushes": [],
      "desc": "",
      "error": "Panic immediately. This is primarily a fencepost against accidental zero bytes getting compiled into programs.",
      "costs": []
    },
    {
      "op": "sha256",
      "opcode": "0x01",
      "pops": ["stack", "[]byte"],
      "pushes": ["[]byte"],
      "desc": "SHA256 hash of value X, yields [32]byte",
      "error": "",
      "costs": [
        {
          "cost": 7,
          "filter": "LogicSigVersion = 1"
        },
        {
          "cost": 35,
          "filter": "LogicSigVersion = 2"
        }
      ]
    },
    {
      "op": "keccak256",
      "opcode": "0x02",
      "pops": ["stack", "[]byte"],
      "pushes": ["[]byte"],
      "desc": "Keccak256 hash of value X, yields [32]byte",
      "error": "",
      "costs": [
        {
          "cost": 26,
          "filter": "LogicSigVersion = 1"
        },
        {
          "cost": 130,
          "filter": "LogicSigVersion = 2"
        }
      ]
    },
    {
      "op": "sha512_256",
      "opcode": "0x03",
      "pops": ["stack", "[]byte"],
      "pushes": ["[]byte"],
      "desc": "SHA512_256 hash of value X, yields [32]byte",
      "error": "",
      "costs": [
        {
          "cost": 9,
          "filter": "LogicSigVersion = 1"
        },
        {
          "cost": 45,
          "filter": "LogicSigVersion = 2"
        }
      ]
    },{
      "op": "ed25519verify",
      "opcode": "0x04",
      "pops": ["stack", "{[]byte A}", "{[]byte B}", "{[]byte C}"],
      "pushes": ["uint64"],
      "error": "",
      "desc": "for (data A, signature B, pubkey C) verify the signature of (\"ProgData\" || program_hash || data) against the pubkey => {0 or 1}",
      "additionalDesc": "The 32 byte public key is the last element on the stack, preceded by the 64 byte signature at the second-to-last element on the stack, preceded by the data which was signed at the third-to-last element on the stack.\n",
      "mode": "Signature",
      "costs": [
        {
          "cost": 1900,
          "filter": ""
        }
      ]
    },{
      "op": "+",
      "opcode": "0x08",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A plus B. Panic on overflow.",
      "error": "",
      "additionalDesc": "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from addw.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_1"
    },{
      "op": "-",
      "opcode": "0x09",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A minus B. Panic if B > A.",
      "error": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "-"
    },{
      "op": "/",
      "opcode": "0x0a",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A divided by B. Panic if B == 0.",
      "error": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_2"
    },{
      "op": "*",
      "opcode": "0x0b",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A times B. Panic on overflow.",
      "error": "",
      "additionalDesc": "Overflow is an error condition which halts execution and fails the transaction. Full precision is available from mulw.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_3"
    },
    {
      "op": "<",
      "opcode": "0x0c",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A less than B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_4"
    },
    {
      "op": ">",
      "opcode": "0x0d",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A greater than B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_5"
    },
    {
      "op": "<=",
      "opcode": "0x0e",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A less than or equal to B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_6"
    },
    {
      "op": ">=",
      "opcode": "0x0f",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A greater than or equal to B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_7"
    },
    {
      "op": "&&",
      "opcode": "0x10",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A is not zero and B is not zero => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_8"
    },
    {
      "op": "||",
      "opcode": "0x11",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A is not zero or B is not zero => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_9"
    },
    {
      "op": "==",
      "opcode": "0x12",
      "pops": ["stack", "{any A}", "{any B}"],
      "pushes": ["uint64"],
      "desc": "A is equal to B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_10"
    },{
      "op": "!=",
      "opcode": "0x13",
      "pops": ["stack", "{any A}", "{any B}"],
      "pushes": ["uint64"],
      "desc": "A is not equal to B => {0 or 1}",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_11"
    },{
      "op": "!",
      "opcode": "0x14",
      "pops": ["stack", "uint64"],
      "pushes": ["uint64"],
      "desc": "X == 0 yields 1; else 0",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_12"
    },
    {
      "op": "len",
      "opcode": "0x15",
      "pops": ["stack", "[]byte"],
      "pushes": ["uint64"],
      "desc": "yields length of byte value X",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "itob",
      "opcode": "0x16",
      "pops": ["stack", "uint64"],
      "pushes": ["[]byte"],
      "desc": "converts uint64 X to big endian bytes",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "btoi",
      "opcode": "0x17",
      "pops": ["stack", "[]byte"],
      "pushes": ["uint64"],
      "desc": "converts bytes X as big endian to uint64",
      "error": "",
      "additionalDesc": "btoi panics if the input is longer than 8 bytes.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "%",
      "opcode": "0x18",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A modulo B. Panic if B == 0.",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_13"
    },
    {
      "op": "|",
      "opcode": "0x19",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A bitwise-or B",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_14"
    },{
      "op": "&",
      "opcode": "0x1a",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A bitwise-and B",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_15"
    },{
      "op": "^",
      "opcode": "0x1b",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "A bitwise-xor B",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_16"
    },
    {
      "op": "~",
      "opcode": "0x1c",
      "pops": ["stack", "uint64"],
      "pushes": ["uint64"],
      "desc": "bitwise invert value X",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "_17"
    },
    {
      "op": "mulw",
      "opcode": "0x1d",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64", "uint64"],
      "desc": "A times B out to 128-bit long result as low (top) and high uint64 values on the stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "addw",
      "opcode": "0x1e",
      "pops": ["stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64", "uint64"],
      "desc": "A plus B out to 128-bit long result as sum (top) and carry-bit uint64 values on the stack",
      "error": "",
      "additionalDesc": "",
      "metadata" : {
        "LogicSigVersion":  ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "intcblock",
      "opcode": "0x20 {varuint length} [{varuint value}, ...]",
      "pops": [],
      "pushes": [],
      "desc": "load block of uint64 constants",
      "error": "",
      "additionalDesc": "intcblock loads following program bytes into an array of integer constants in the evaluator. These integer constants can be referred to by intc and intc_* which will push the value onto the stack. Subsequent calls to intcblock reset and replace the integer constants available to the script.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "intcblock-uint"
    },
    {
      "op": "intc",
      "opcode": "0x21 {uint8 int constant index}",
      "pops": [],
      "pushes": ["uint64"],
      "desc": "push value from uint64 constants to stack by index into constants",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "intc_0",
      "opcode": "0x22",
      "pops": [],
      "pushes": ["uint64"],
      "desc": "push constant 0 from intcblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "intc_1",
      "opcode": "0x23",
      "pops": [],
      "pushes": ["uint64"],
      "desc": "push constant 1 from intcblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "intc_2",
      "opcode": "0x24",
      "pops": [],
      "pushes": ["uint64"],
      "desc": "push constant 2 from intcblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "intc_3",
      "opcode": "0x25",
      "pops": [],
      "pushes": ["uint64"],
      "desc": "push constant 3 from intcblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "bytecblock",
      "opcode": "0x26 {varuint length} [({varuint value length} bytes), ...]",
      "pops": [],
      "pushes": [],
      "desc": "load block of byte-array constants",
      "error": "",
      "additionalDesc": "<code>bytecblock</code> loads the following program bytes into an array of byte string constants in the evaluator. These constants can be referred to by <code>bytec</code> and <code>bytec_*</code> which will push the value onto the stack. Subsequent calls to bytecblock reset and replace the bytes constants available to the script.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "bytecblock-bytes"
    },
    {
      "op": "bytec",
      "opcode": "0x27 {uint8 byte constant index}",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push bytes constant to stack by index into constants",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "bytec-i"
    },
    {
      "op": "bytec_0",
      "opcode": "0x28",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push constant 0 from bytecblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "bytec_1",
      "opcode": "0x29",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push constant 1 from bytecblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "bytec_2",
      "opcode": "0x2a",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push constant 2 from bytecblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "bytec_3",
      "opcode": "0x2b",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push constant 3 from bytecblock to stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "arg",
      "opcode": "0x2c {uint8 arg index N}",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push Args[N] value to stack by index",
      "error": "",
      "additionalDesc": "",
      "mode": "Signature",
      "params": ["uint8"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "arg-n"
    },
    {
      "op": "arg_0",
      "opcode": "0x2d",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push Args[0] to stack",
      "error": "",
      "additionalDesc": "",
      "mode": "Signature",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "arg_1",
      "opcode": "0x2e",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push Args[1] to stack",
      "error": "",
      "additionalDesc": "",
      "mode": "Signature",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "arg_2",
      "opcode": "0x2f",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push Args[2] to stack",
      "error": "",
      "additionalDesc": "",
      "mode": "Signature",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "arg_3",
      "opcode": "0x30",
      "pops": [],
      "pushes": ["[]byte"],
      "desc": "push Args[3] to stack",
      "error": "",
      "additionalDesc": "",
      "mode": "Signature",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "txn",
      "opcode": "0x31 {uint8 transaction field index}",
      "pops": [],
      "pushes": ["any"],
      "desc": "push field from current transaction to stack",
      "error": "",
      "additionalDesc": "",
      "params": ["txn_fields"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "txn-f"
    },
    {
      "op": "global",
      "opcode": "0x32 {uint8 global field index}",
      "pops": [],
      "pushes": ["any"],
      "desc": "push value from globals to stack",
      "error": "",
      "additionalDesc": "",
      "params": ["global_fields"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "global-f"
    },
    {
      "op": "gtxn",
      "opcode": "0x33 {uint8 transaction group index}{uint8 transaction field index}",
      "pops": [],
      "pushes": ["any"],
      "desc": "push field to the stack from a transaction in the current transaction group",
      "error": "",
      "additionalDesc": "for notes on transaction fields available, see <code>txn</code>. If this transaction is <em>i</em> in the group, <code>gtxn i field</code> is equivalent to <code>txn field</code>.",
      "params": ["uint8", "txn_fields"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "gtxn-t-f"
    },
    {
      "op": "load",
      "opcode": "0x34 {uint8 position in scratch space to load from}",
      "pops": [],
      "pushes": ["any"],
      "desc": "copy a value from scratch space to the stack",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "load-i"
    },
    {
      "op": "store",
      "opcode": "0x35 {uint8 position in scratch space to store to}",
      "pops": ["... stack", "any"],
      "pushes": [],
      "desc": "pop a value from the stack and store to scratch space",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "store-i"
    },
    {
      "op": "txna",
      "opcode": "0x36 {uint8 transaction field index}{uint8 transaction field array index}",
      "pops": [],
      "pushes": ["any"],
      "desc": "push value of an array field from current transaction to stack",
      "error": "",
      "additionalDesc": "",
      "params": ["txn_fields", "uint8"],
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "txna-f-i"
    },
    {
      "op": "gtxna",
      "opcode": "0x37 {uint8 transaction group index}{uint8 transaction field index}{uint8 transaction field array index}",
      "pops": [],
      "pushes": ["any"],
      "desc": "push value of a field to the stack from a transaction in the current transaction group",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8", "txn_fields", "uint8"],
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "gtxna-t-f-i"
    },
   {
     "op": "gtxns",
     "opcode": "0x38 {uint8 transaction field index}",
     "pops": ["... stack", "uint64"],
     "pushes": ["any"],
     "desc": "push field F of the Ath transaction in the current group",
     "error": "",
     "additionalDesc": "for notes on transaction fields available, see txn. If top of stack is i, gtxns field is equivalent to gtxn _i_ field. gtxns exists so that i can be calculated, often based on the index of the current transaction",
     "params": [],
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "anchor": "gtxns-f",
     "since": 3
   },
   {
     "op": "gtxnsa",
     "opcode": "0x39 {uint8 transaction field index} {uint8 transaction field array index}",
     "pops": ["... stack", "uint64"],
     "pushes": ["any"],
     "desc": "push Ith value of the array field F from the Ath transaction in the current group",
     "error": "",
     "additionalDesc": "",
     "params": [],
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "anchor": "gtxnsa-f-i",
     "since": 3
   },
    {
      "op": "bnz",
      "opcode": "0x40 {0..0x7fff forward branch offset, big endian}",
      "pops": ["... stack", "uint64"],
      "pushes": [],
      "desc": "branch if value X is not zero",
      "error": "",
      "additionalDesc": "The <code>bnz</code> instruction opcode 0x40 is followed by two immediate data bytes which are a high byte first and low byte second which together form a 16 bit offset which the instruction may branch to. For a bnz instruction at <code>pc</code>, if the last element of the stack is not zero then branch to instruction at <code>pc + 3 + N</code>, else proceed to next instruction at <code>pc + 3</code>. Branch targets must be well aligned instructions. (e.g. Branching to the second byte of a 2 byte op will be rejected.) Branch offsets are currently limited to forward branches only, 0-0x7fff. A future expansion might make this a signed 16 bit integer allowing for backward branches and looping.</p>\n<p>At LogicSigVersion 2 it became allowed to branch to the end of the program exactly after the last instruction: bnz to byte N (with 0-indexing) was illegal for a TEAL program with N bytes before LogicSigVersion 2, and is legal after it. This change eliminates the need for a last instruction of no-op as a branch target at the end. (Branching beyond the end--in other words, to a byte larger than N--is still illegal and will cause the program to fail.)",
      "params": ["string"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "bnz-target"
    },
    {
      "op": "bz",
      "opcode": "0x41 {0..0x7fff forward branch offset, big endian}",
      "pops": ["... stack", "uint64"],
      "pushes": [],
      "desc": "branch if value X is zero",
      "error": "",
      "additionalDesc": "See <code>bnz</code> for details on how branches work. <code>bz</code> inverts the behavior of <code>bnz</code>.",
      "params": ["string"],
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "bz-target"
    },
    {
      "op": "b",
      "opcode": "0x42 {0..0x7fff forward branch offset, big endian}",
      "pops": [],
      "pushes": [],
      "desc": "branch unconditionally to offset",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "error": "",
      "additionalDesc": "See <code>bnz</code> for details on how branches work. <code>b</code> always jumps to the offset.",
      "params": ["string"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "b-target"
    },
    {
      "op": "return",
      "opcode": "0x43",
      "pops": [ "... stack", "uint64"],
      "pushes": [],
      "desc": "use last value on stack as success value; end",
      "error": "",
      "additionalDesc": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
   {
     "op": "assert",
     "opcode": "0x44",
     "pops": [ "... stack", "uint64"],
     "pushes": [],
     "desc": "immediately fail unless value X is a non-zero number",
     "error": "",
     "additionalDesc": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
    },
    {
      "op": "pop",
      "opcode": "0x48",
      "pops": [ "... stack", "any"],
      "pushes": [],
      "desc": "discard value X from stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "dup",
      "opcode": "0x49",
      "pops": ["... stack", "any"],
      "pushes": ["... stack","any", "any"],
      "desc": "duplicate last value on stack",
      "error": "",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "dup2",
      "opcode": "0x4a",
      "pops": ["... stack", "{any A}", "{any B}"],
      "pushes": ["... stack","any", "any", "any", "any"],
      "desc": "duplicate two last values on stack: A, B -> A, B, A, B",
      "error": "",
      "additionalDesc": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
       "op": "dig",
       "opcode": "0x4b {uint8 depth}",
       "pops": ["... stack", "any"],
       "pushes": ["... stack","any", "any"],
       "desc": "push the Nth value from the top of the stack. dig 0 is equivalent to dup",
       "error": "",
       "additionalDesc": "",
       "params": ["uint8"],
       "metadata": {
         "LogicSigVersion": ">=3"
       },
       "costs": [
         {
           "cost": 1,
           "filter": ""
         }
       ],
      "anchor": "dig-n",
      "since": 3
    },
     {
       "op": "swap",
       "opcode": "0x4c",
       "pops": ["... stack", "{any A}", "{any B}"],
       "pushes": ["... stack","any", "any"],
       "desc": "swaps two last values on stack: A, B -> B, A",
       "error": "",
       "additionalDesc": "",
       "params": [],
       "metadata": {
         "LogicSigVersion": ">=3"
       },
       "costs": [
         {
           "cost": 1,
           "filter": ""
         }
       ],
       "since": 3
     },
   {
     "op": "select",
     "opcode": "0x4d",
     "pops": ["... stack", "{any A}", "{any B}", "{uint64 C}"],
     "pushes": ["any"],
     "desc": "selects one of two values based on top-of-stack: A, B, C -> (if C != 0 then B else A)",
     "error": "",
     "additionalDesc": "",
     "params": [],
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
    {
      "op": "concat",
      "opcode": "0x50",
      "pops": ["... stack", "{[]byte A}", "{[]byte B}"],
      "pushes": ["[]byte"],
      "desc": "pop two byte strings A and B and join them, push the result\n",
      "error": "",
      "additionalDesc": "<code>concat</code> panics if the result would be greater than 4096 bytes.",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "substring",
      "opcode": "0x51 {uint8 start position}{uint8 end position}",
      "pops": ["... stack", "[]byte"],
      "pushes": ["[]byte"],
      "desc": "pop a byte string X. For immediate values in 0..255 M and N: extract a range of bytes from it starting at M up to but not including N, push the substring result. If N &lt; M, or either is larger than the string length, the program fails",
      "error": "",
      "additionalDesc": "",
      "params": ["uint8", "uint8"],
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "substring-s-e"
    },
    {
      "op": "substring3",
      "opcode": "0x52",
      "pops": ["... stack", "{[]byte A}", "{uint64 B}", "{uint64 C}"],
      "pushes": ["[]byte"],
      "desc": "pop a byte string A and two integers B and C. Extract a range of bytes from A starting at B up to but not including C, push the substring result. If C &lt; B, or either is larger than the string length, the program fails",
      "error": "",
      "additionalDesc": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
   {
     "op": "getbit",
     "opcode": "0x53",
     "pops": ["... stack", "{any A}", "{uint64 B}"],
     "pushes": ["uint64"],
     "desc": "pop a target A (integer or byte-array), and index B. Push the Bth bit of A",
     "error": "",
     "additionalDesc": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
   {
     "op": "setbit",
     "opcode": "0x54",
     "pops": ["... stack", "{any A}", "{uint64 B}", "{uint64 C}"],
     "pushes": ["uint64"],
     "desc": "pop a target A, index B, and bit C. Set the Bth bit of A to C, and push the result",
     "error": "",
     "additionalDesc": "bit indexing begins with low-order bits in integers. Setting bit 4 to 1 on the integer 0 yields 16 (int 0x0010, or 2^4). Indexing begins in the first bytes of a byte-string (as seen in getbyte and substring). Setting bits 0 through 11 to 1 in a 4 byte-array of 0s yields byte 0xfff00000",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
   {
     "op": "getbyte",
     "opcode": "0x55",
     "pops": ["... stack", "{[]byte A}", "{uint64 B}"],
     "pushes": ["uint64"],
     "desc": "pop a byte-array A and integer B. Extract the Bth byte of A and push it as an integer",
     "error": "",
     "additionalDesc": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
   {
     "op": "setbyte",
     "opcode": "0x56",
     "pops": ["... stack", "{[]byte A}", "{uint64 B}", "{uint64 C}"],
     "pushes": ["[]byte"],
     "desc": "pop a byte-array A, integer B, and small integer C (between 0..255). Set the Bth byte of A to C, and push the result",
     "error": "",
     "additionalDesc": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
    {
      "op": "balance",
      "opcode": "0x60",
      "pops": ["... stack", "uint64"],
      "pushes": ["uint64"],
      "desc": "get balance for the requested account specified by Txn.Accounts[A] in microalgos. A is specified as an account index in the Accounts field of the ApplicationCall transaction, zero index means the sender",
      "error": "",
      "additionalDesc": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_opted_in",
      "opcode": "0x61",
      "pops": ["... stack", "{uint64 A}", "{uint64 B}"],
      "pushes": ["uint64"],
      "desc": "check if account specified by Txn.Accounts[A] opted in for the application B => {0 or 1}",
      "error": "",
      "additionalDesc": "params: account index, application id (top of the stack on opcode entry). Return: 1 if opted in and 0 otherwise.",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_local_get",
      "opcode": "0x62",
      "pops": ["... stack", "{uint64 A}", "{[]byte B}"],
      "pushes": ["any"],
      "desc": "read from account specified by Txn.Accounts[A] from local state of the current application key B => value",
      "error": "",
      "additionalDesc": "params: account index, state key. Return: value. The value is zero if the key does not exist.",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_local_get_ex",
      "opcode": "0x63",
      "pops": ["... stack", "{uint64 A}", "{uint64 B}", "{[]byte C}"],
      "pushes": ["uint64", "any"],
      "desc": "read from account specified by Txn.Accounts[A] from local state of the application B key C => {0 or 1 (top), value}",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: account index, application id, state key. Return: did_exist flag (top of the stack, 1 if exist and 0 otherwise), value.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_global_get",
      "opcode": "0x64",
      "pops": ["... stack", "[]byte"],
      "pushes": ["any"],
      "desc": "read key A from global state of a current application => value",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: state key. Return: value. The value is zero if the key does not exist.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_global_get_ex",
      "opcode": "0x65",
      "pops": ["... stack", "{uint64 A}", "{[]byte B}"],
      "pushes": ["uint64", "any"],
      "desc": "read from application Txn.ForeignApps[A] global state key B => {0 or 1 (top), value}. A is specified as an account index in the ForeignApps field of the ApplicationCall transaction, zero index means this app\n",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: application index, state key. Return: value. Application index is",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_local_put",
      "opcode": "0x66",
      "pops": ["... stack", "{uint64 A}", "{[]byte B}", "{any C}"],
      "pushes": [],
      "desc": "write to account specified by Txn.Accounts[A] to local state of a current application key B with value C",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: account index, state key, value.",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_global_put",
      "opcode": "0x67",
      "pops": ["... stack", "{[]byte A}", "{any B}"],
      "pushes": [],
      "desc": "write key A and value B to global state of the current application",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_local_del",
      "opcode": "0x68",
      "pops": ["... stack", "{uint64 A}", "{[]byte B}"],
      "pushes": [],
      "desc": "delete from account specified by Txn.Accounts[A] local state key B of the current application",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: account index, state key.\n\nDeleting a key which is already absent has no effect on the application local state. (In particular, it does not cause the program to fail.)",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "app_global_del",
      "opcode": "0x69",
      "pops": ["... stack", "[]byte"],
      "pushes": [],
      "desc": "delete key A from a global state of the current application",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: state key.\n\nDeleting a key which is already absent has no effect on the application global state. (In particular, it does not cause the program to fail.)",
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ]
    },
    {
      "op": "asset_holding_get",
      "opcode": "0x70 {uint8 asset holding field index}",
      "pops": ["... stack", "{uint64 A}", "{[]byte B}"],
      "pushes": ["uint64", "any"],
      "desc": "read from account specified by Txn.Accounts[A] and asset B holding field X (imm arg) => {0 or 1 (top), value}",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: account index, asset id. Return: did_exist flag (1 if exist and 0 otherwise), value.",
      "params": ["asset_holding_get_fields"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "asset_holding_get-i"
    },
    {
      "op": "asset_params_get",
      "opcode": "0x71 {uint8 asset params field index}",
      "pops": ["... stack", "uint64"],
      "pushes": ["uint64", "any"],
      "desc": "read from asset Txn.ForeignAssets[A] params field X (imm arg) => {0 or 1 (top), value}",
      "error": "",
      "metadata": {
        "LogicSigVersion": ">=2"
      },
      "mode": "Application",
      "additionalDesc": "params: txn.ForeignAssets offset. Return: did_exist flag (1 if exist and 0 otherwise), value.",
      "params": ["asset_params_get_fields"],
      "costs": [
        {
          "cost": 1,
          "filter": ""
        }
      ],
      "anchor": "asset_params_get-i"
    },
   {
     "op": "min_balance",
     "opcode": "0x78",
     "pops": ["... stack", "any"],
     "pushes": ["uint64"],
     "desc": "get minimum required balance for the requested account specified by Txn.Accounts[A] in microalgos. A is specified as an account index in the Accounts field of the ApplicationCall transaction, zero index means the sender. Required balance is affected by ASA and App usage. When creating or opting into an app, the minimum balance grows before the app code runs, therefore the increase is visible there. When deleting or closing out, the minimum balance decreases after the app executes.",
     "error": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "mode": "Application",
     "additionalDesc": "params: Before v4, Txn.Accounts offset. Since v4, Txn.Accounts offset or an account address that appears in Txn.Accounts or is Txn.Sender). Return: value.",
     "params": [],
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "since": 3
   },
   {
     "op": "pushbytes",
     "opcode": "0x80 {varuint length} {bytes}",
     "pops": [],
     "pushes": ["[]byte"],
     "desc": "push the following program bytes to the stack",
     "error": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "additionalDesc": "pushbytes args are not added to the bytecblock during assembly processes",
     "params": [],
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "anchor": "pushbytes-bytes",
     "since": 3
   },
   {
     "op": "pushint",
     "opcode": "0x81 {varuint int}",
     "pops": [],
     "pushes": ["uint64"],
     "desc": "push immediate UINT to the stack as an integer",
     "error": "",
     "metadata": {
       "LogicSigVersion": ">=3"
     },
     "additionalDesc": "pushint args are not added to the intcblock during assembly processes",
     "params": [],
     "costs": [
       {
         "cost": 1,
         "filter": ""
       }
     ],
     "anchor": "pushint-uint",
     "since": 3
   },
   {
     "op": "int",
     "opcode": "Pseudo opcode",
     "pops": [],
     "pushes": [],
     "desc":"int pseudo opcode",
     "additionalDesc" : "int constants may be 0x prefixed for hex, 0 prefixed for octal, or decimal numbers."
   },
   {
     "op": "byte",
     "opcode": "Pseudo opcode",
     "pops": [],
     "pushes": [],
     "desc":"byte pseudo opcode",
     "additionalDesc" : "byte base64 AAAA...<br>byte b64 AAAA...<br>byte base64(AAAA...)<br>byte b64(AAAA...)<br>byte base32 AAAA...<br>byte b32 AAAA...<br>byte base32(AAAA...)<br>byte b32(AAAA...)<br>byte 0x0123456789abcdef...<br>byte \"\\x01\\x02\"<br>byte \"string literal\""
   },
   {
     "op": "addr",
     "opcode": "Pseudo opcode",
     "pops": [],
     "pushes": [],
     "desc":"addr pseudo opcode",
     "additionalDesc" : "addr {address}"
   }
 ]
