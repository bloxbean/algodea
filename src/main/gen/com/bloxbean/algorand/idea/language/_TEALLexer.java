/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.bloxbean.algorand.idea.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.bloxbean.algorand.idea.language.psi.TEALTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TEALLexer.flex</tt>
 */
public class _TEALLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\103\1\0\2\66\1\104\1\100\3\0\1\74\1\72\1\0\1\73\1"+
    "\64\1\4\1\16\1\17\1\20\1\21\1\63\1\67\1\70\2\63\1\71\2\0\1\75\1\77\1\76\1"+
    "\65\1\66\1\45\1\54\1\42\1\46\1\65\1\53\1\56\1\61\1\41\2\65\1\55\1\51\1\37"+
    "\1\40\2\65\1\60\1\43\1\52\1\44\1\57\3\65\1\3\1\0\1\101\1\0\1\105\1\15\1\0"+
    "\1\24\1\11\1\10\1\27\1\23\1\50\1\26\1\35\1\5\1\65\1\14\1\12\1\36\1\6\1\13"+
    "\1\33\1\65\1\25\1\30\1\7\1\32\1\62\1\47\1\31\1\22\1\34\1\0\1\102\1\0\1\106"+
    "\6\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\4\5\1\6\2\5"+
    "\1\7\23\5\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\1\5\1\22"+
    "\10\5\1\6\3\5\1\7\40\5\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\3\5\1\31\5\5\1\32\4\5"+
    "\1\31\7\5\1\6\4\5\1\33\17\5\1\0\1\5"+
    "\1\31\1\34\1\31\1\5\1\35\5\5\1\36\12\5"+
    "\1\37\1\40\15\5\1\41\33\5\1\42\2\5\1\43"+
    "\10\5\1\44\27\5\1\45\56\5\1\46\17\5\1\47"+
    "\5\5\1\50\27\5\1\51\1\52\32\5\1\53\21\5"+
    "\1\54\1\5\1\45\32\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[410];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\107\0\107\0\107\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\107\0\107\0\107\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f"+
    "\0\u0ba6\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u01aa\0\u0d50"+
    "\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\u11c0"+
    "\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8"+
    "\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630"+
    "\0\u1677\0\u16be\0\u1705\0\107\0\107\0\107\0\107\0\u174c"+
    "\0\107\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d"+
    "\0\u1984\0\u19cb\0\u01aa\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e"+
    "\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66"+
    "\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u01aa\0\u1ec9\0\u1f10\0\u1f57"+
    "\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u01aa"+
    "\0\u01aa\0\u23c7\0\u01aa\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a"+
    "\0\u01aa\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b"+
    "\0\u2762\0\u27a9\0\u27f0\0\u01aa\0\u01aa\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6\0\u2afd"+
    "\0\u2b44\0\u2b8b\0\107\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e"+
    "\0\u31a5\0\u31ec\0\u3233\0\u327a\0\u32c1\0\u3308\0\u01aa\0\u334f"+
    "\0\u3396\0\u01aa\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540"+
    "\0\u3587\0\u35ce\0\u01aa\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u3be8\0\u3c2f\0\u01aa\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92"+
    "\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u3f83\0\u3fca"+
    "\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202"+
    "\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a"+
    "\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d\0\u45e4\0\u462b\0\u4672"+
    "\0\u46b9\0\u4700\0\u4747\0\u478e\0\u47d5\0\u481c\0\u4863\0\u48aa"+
    "\0\u48f1\0\u01aa\0\u4938\0\u497f\0\u49c6\0\u4a0d\0\u4a54\0\u4a9b"+
    "\0\u4ae2\0\u4b29\0\u4b70\0\u4bb7\0\u4bfe\0\u4c45\0\u4c8c\0\u4cd3"+
    "\0\u4d1a\0\u01aa\0\u4d61\0\u4da8\0\u4def\0\u4e36\0\u4e7d\0\u4ec4"+
    "\0\u4f0b\0\u4f52\0\u4f99\0\u4fe0\0\u5027\0\u506e\0\u50b5\0\u50fc"+
    "\0\u5143\0\u518a\0\u51d1\0\u5218\0\u525f\0\u52a6\0\u52ed\0\u5334"+
    "\0\u537b\0\u53c2\0\u5409\0\u5450\0\u5497\0\u54de\0\u5525\0\u01aa"+
    "\0\u01aa\0\u556c\0\u55b3\0\u55fa\0\u5641\0\u5688\0\u56cf\0\u5716"+
    "\0\u575d\0\u57a4\0\u57eb\0\u5832\0\u5879\0\u58c0\0\u5907\0\u594e"+
    "\0\u5995\0\u59dc\0\u5a23\0\u5a6a\0\u5ab1\0\u5af8\0\u5b3f\0\u5b86"+
    "\0\u5bcd\0\u5c14\0\u5c5b\0\u01aa\0\u5ca2\0\u5ce9\0\u5d30\0\u5d77"+
    "\0\u5dbe\0\u5e05\0\u5e4c\0\u5e93\0\u5eda\0\u5f21\0\u5f68\0\u5faf"+
    "\0\u5ff6\0\u603d\0\u6084\0\u60cb\0\u6112\0\u01aa\0\u6159\0\u61a0"+
    "\0\u61e7\0\u622e\0\u6275\0\u62bc\0\u6303\0\u634a\0\u6391\0\u63d8"+
    "\0\u641f\0\u6466\0\u64ad\0\u64f4\0\u653b\0\u6582\0\u65c9\0\u6610"+
    "\0\u6657\0\u669e\0\u66e5\0\u672c\0\u6773\0\u67ba\0\u6801\0\u6848"+
    "\0\u688f\0\u68d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[410];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\7\1\14\1\7\4\15\1\7\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\7\1\24\1\25"+
    "\2\7\1\26\1\27\1\30\1\7\1\31\1\7\1\32"+
    "\1\33\1\34\2\7\1\35\3\7\1\36\1\37\1\7"+
    "\1\40\2\7\1\15\1\2\1\7\1\2\3\15\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\2"+
    "\1\51\1\52\1\53\1\54\110\0\2\3\107\0\1\7"+
    "\1\0\16\7\1\55\46\7\14\0\1\7\4\0\1\56"+
    "\105\0\1\7\1\0\1\7\1\57\1\60\62\7\14\0"+
    "\1\7\3\0\1\7\1\0\65\7\14\0\1\7\3\0"+
    "\1\7\1\0\24\7\1\61\40\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\62\56\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\63\1\64\12\7\1\65\1\7"+
    "\1\66\7\7\1\67\35\7\14\0\1\7\3\0\1\7"+
    "\1\0\6\7\1\70\7\7\1\71\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\72\46\7\14\0\1\7"+
    "\16\0\4\15\41\0\1\15\1\73\2\0\3\15\20\0"+
    "\1\7\1\0\20\7\1\74\1\7\1\75\42\7\14\0"+
    "\1\7\3\0\1\7\1\0\3\7\1\76\14\7\1\77"+
    "\1\7\1\100\1\101\1\102\1\7\1\103\14\7\1\104"+
    "\21\7\14\0\1\7\3\0\1\7\1\0\16\7\1\105"+
    "\46\7\14\0\1\7\3\0\1\7\1\0\2\7\1\10"+
    "\2\7\1\106\57\7\14\0\1\7\3\0\1\7\1\0"+
    "\25\7\1\107\37\7\14\0\1\7\3\0\1\7\1\0"+
    "\2\7\1\110\22\7\1\111\2\7\1\112\34\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\113\63\7\14\0"+
    "\1\7\3\0\1\7\1\0\6\7\1\114\10\7\1\115"+
    "\45\7\14\0\1\7\3\0\1\7\1\0\25\7\1\116"+
    "\37\7\14\0\1\7\3\0\1\7\1\0\6\7\1\117"+
    "\56\7\14\0\1\7\3\0\1\7\1\0\26\7\1\120"+
    "\36\7\14\0\1\7\3\0\1\7\1\0\5\7\1\121"+
    "\17\7\1\122\37\7\14\0\1\7\3\0\1\7\1\0"+
    "\26\7\1\123\36\7\14\0\1\7\3\0\1\7\1\0"+
    "\23\7\1\124\41\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\125\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\126\16\7\1\127\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\6\7\1\130\10\7\1\131\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\132\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\6\7\1\133\56\7\14\0\1\7"+
    "\77\0\1\134\106\0\1\135\106\0\1\136\107\0\1\137"+
    "\110\0\1\140\103\0\1\141\12\0\1\7\1\0\20\7"+
    "\1\142\44\7\14\0\1\7\1\56\1\0\105\56\3\0"+
    "\1\7\1\0\2\7\1\143\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\144\56\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\145\63\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\146\63\7\14\0\1\7\3\0"+
    "\1\7\1\0\27\7\1\67\35\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\147\56\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\150\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\5\7\1\151\57\7\14\0\1\7\3\0"+
    "\1\7\1\0\17\7\1\152\45\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\153\63\7\14\0\1\7\3\0"+
    "\1\7\1\0\3\7\1\154\11\7\1\155\47\7\14\0"+
    "\1\7\16\0\4\73\41\0\1\73\3\0\3\73\20\0"+
    "\1\7\1\0\20\7\1\67\44\7\14\0\1\7\3\0"+
    "\1\7\1\0\13\7\1\156\51\7\14\0\1\7\3\0"+
    "\1\7\1\0\43\7\1\157\21\7\14\0\1\7\3\0"+
    "\1\7\1\0\21\7\1\160\43\7\14\0\1\7\3\0"+
    "\1\7\1\0\22\7\1\161\42\7\14\0\1\7\3\0"+
    "\1\7\1\0\23\7\1\162\41\7\14\0\1\7\3\0"+
    "\1\7\1\0\43\7\1\163\21\7\14\0\1\7\3\0"+
    "\1\7\1\0\26\7\1\164\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\20\7\1\165\44\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\166\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\167\56\7\14\0\1\7\3\0"+
    "\1\7\1\0\26\7\1\170\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\171\56\7\14\0\1\7\3\0"+
    "\1\7\1\0\4\7\1\172\60\7\14\0\1\7\3\0"+
    "\1\7\1\0\17\7\1\173\45\7\14\0\1\7\3\0"+
    "\1\7\1\0\7\7\1\174\55\7\14\0\1\7\3\0"+
    "\1\7\1\0\26\7\1\67\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\15\7\1\175\47\7\14\0\1\7\3\0"+
    "\1\7\1\0\5\7\1\176\57\7\14\0\1\7\3\0"+
    "\1\7\1\0\33\7\1\177\31\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\200\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\201\7\7\1\202\46\7\14\0"+
    "\1\7\3\0\1\7\1\0\20\7\1\203\44\7\14\0"+
    "\1\7\3\0\1\7\1\0\22\7\1\204\42\7\14\0"+
    "\1\7\3\0\1\7\1\0\23\7\1\205\41\7\14\0"+
    "\1\7\3\0\1\7\1\0\5\7\1\206\57\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\207\63\7\14\0"+
    "\1\7\3\0\1\7\1\0\24\7\1\210\40\7\14\0"+
    "\1\7\3\0\1\7\1\0\21\7\1\211\43\7\14\0"+
    "\1\7\3\0\1\7\1\0\2\7\1\212\62\7\14\0"+
    "\1\7\3\0\1\7\1\0\6\7\1\213\56\7\14\0"+
    "\1\7\3\0\1\7\1\0\25\7\1\214\37\7\14\0"+
    "\1\7\101\0\1\215\10\0\1\7\1\0\6\7\1\216"+
    "\56\7\14\0\1\7\3\0\1\7\1\0\3\7\1\217"+
    "\61\7\14\0\1\7\3\0\1\7\1\0\4\7\1\220"+
    "\60\7\14\0\1\7\3\0\1\7\1\0\17\7\1\221"+
    "\45\7\14\0\1\7\3\0\1\7\1\0\3\7\1\222"+
    "\61\7\14\0\1\7\3\0\1\7\1\0\1\223\64\7"+
    "\14\0\1\7\3\0\1\7\1\0\16\7\1\143\46\7"+
    "\14\0\1\7\3\0\1\7\1\0\17\7\1\224\45\7"+
    "\14\0\1\7\3\0\1\7\1\0\22\7\1\221\42\7"+
    "\14\0\1\7\3\0\1\7\1\0\3\7\1\225\61\7"+
    "\14\0\1\7\3\0\1\7\1\0\20\7\1\226\44\7"+
    "\14\0\1\7\3\0\1\7\1\0\62\7\1\227\2\7"+
    "\14\0\1\7\3\0\1\7\1\0\21\7\1\175\43\7"+
    "\14\0\1\7\3\0\1\7\1\0\10\7\1\230\54\7"+
    "\14\0\1\7\3\0\1\7\1\0\20\7\1\221\21\7"+
    "\1\231\22\7\14\0\1\7\3\0\1\7\1\0\16\7"+
    "\1\232\46\7\14\0\1\7\3\0\1\7\1\0\16\7"+
    "\1\233\46\7\14\0\1\7\3\0\1\7\1\0\5\7"+
    "\1\175\2\7\1\234\54\7\14\0\1\7\3\0\1\7"+
    "\1\0\27\7\1\175\35\7\14\0\1\7\3\0\1\7"+
    "\1\0\25\7\1\235\37\7\14\0\1\7\3\0\1\7"+
    "\1\0\4\7\1\236\60\7\14\0\1\7\3\0\1\7"+
    "\1\0\13\7\1\67\51\7\14\0\1\7\3\0\1\7"+
    "\1\0\20\7\1\237\44\7\14\0\1\7\3\0\1\7"+
    "\1\0\23\7\1\240\41\7\14\0\1\7\3\0\1\7"+
    "\1\0\13\7\1\241\46\7\1\242\2\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\7\1\243\63\7\14\0\1\7"+
    "\3\0\1\7\1\0\42\7\1\244\22\7\14\0\1\7"+
    "\3\0\1\7\1\0\26\7\1\245\36\7\14\0\1\7"+
    "\3\0\1\7\1\0\34\7\1\246\30\7\14\0\1\7"+
    "\3\0\1\7\1\0\23\7\1\247\41\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\250\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\251\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\252\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\253\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\252\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\45\7\1\254\1\7\1\255\15\7"+
    "\14\0\1\7\3\0\1\7\1\0\45\7\1\256\17\7"+
    "\14\0\1\7\3\0\1\7\1\0\1\257\64\7\14\0"+
    "\1\7\3\0\1\7\1\0\16\7\1\260\46\7\14\0"+
    "\1\7\3\0\1\7\1\0\25\7\1\261\37\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\262\63\7\14\0"+
    "\1\7\102\0\1\263\7\0\1\7\1\0\40\7\1\264"+
    "\24\7\14\0\1\7\3\0\1\7\1\0\4\7\1\265"+
    "\3\7\1\230\54\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\266\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\267\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\270\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\157\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\62\7\1\271\2\7\14\0\1\7\3\0\1\7\1\0"+
    "\11\7\4\221\50\7\14\0\1\7\3\0\1\7\1\0"+
    "\2\7\1\272\62\7\14\0\1\7\3\0\1\7\1\0"+
    "\20\7\1\175\44\7\14\0\1\7\3\0\1\7\1\0"+
    "\5\7\1\273\1\274\12\7\1\275\43\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\276\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\277\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\221\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\2\7\1\300\62\7\14\0\1\7"+
    "\3\0\1\7\1\0\62\7\1\301\2\7\14\0\1\7"+
    "\3\0\1\7\1\0\12\7\1\302\52\7\14\0\1\7"+
    "\3\0\1\7\1\0\6\7\1\303\56\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\7\1\245\63\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\304\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\305\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\306\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\2\7\1\307\62\7\14\0\1\7"+
    "\3\0\1\7\1\0\2\7\1\310\62\7\14\0\1\7"+
    "\3\0\1\7\1\0\24\7\1\311\40\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\312\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\24\7\1\313\40\7\14\0\1\7"+
    "\3\0\1\7\1\0\3\7\1\314\61\7\14\0\1\7"+
    "\3\0\1\7\1\0\23\7\1\315\41\7\14\0\1\7"+
    "\3\0\1\7\1\0\26\7\1\316\36\7\14\0\1\7"+
    "\3\0\1\7\1\0\22\7\1\317\42\7\14\0\1\7"+
    "\3\0\1\7\1\0\22\7\1\320\42\7\14\0\1\7"+
    "\3\0\1\7\1\0\5\7\1\321\57\7\14\0\1\7"+
    "\3\0\1\7\1\0\2\7\1\322\62\7\14\0\1\7"+
    "\3\0\1\7\1\0\3\7\1\323\61\7\14\0\1\7"+
    "\3\0\1\7\1\0\7\7\1\324\55\7\14\0\1\7"+
    "\3\0\1\7\1\0\12\7\1\325\52\7\14\0\1\7"+
    "\3\0\1\7\1\0\10\7\1\326\54\7\14\0\1\7"+
    "\3\0\1\7\1\0\6\7\1\327\56\7\14\0\1\7"+
    "\3\0\1\7\1\0\26\7\1\330\36\7\14\0\1\7"+
    "\3\0\1\7\1\0\5\7\1\331\57\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\7\1\67\63\7\14\0\1\7"+
    "\3\0\1\7\1\0\5\7\1\221\57\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\332\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\63\7\1\333\1\7\14\0\1\7"+
    "\3\0\1\7\1\0\13\7\1\334\51\7\14\0\1\7"+
    "\3\0\1\7\1\0\42\7\1\335\22\7\14\0\1\7"+
    "\3\0\1\7\1\0\33\7\1\336\31\7\14\0\1\7"+
    "\3\0\1\7\1\0\36\7\1\337\26\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\7\1\340\63\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\341\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\32\7\1\342\2\7\1\343\1\7"+
    "\1\344\1\7\1\345\2\7\1\346\1\347\1\350\1\351"+
    "\3\7\1\352\11\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\353\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\5\7\1\354\57\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\355\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\36\7\1\356\26\7\14\0\1\7\3\0\1\7\1\0"+
    "\2\7\1\357\62\7\14\0\1\7\3\0\1\7\1\0"+
    "\36\7\1\360\26\7\14\0\1\7\3\0\1\7\1\0"+
    "\22\7\1\361\42\7\14\0\1\7\3\0\1\7\1\0"+
    "\6\7\1\362\56\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\363\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\13\7\1\364\51\7\14\0\1\7\3\0\1\7\1\0"+
    "\64\7\1\365\14\0\1\7\3\0\1\7\1\0\26\7"+
    "\1\366\1\7\1\367\34\7\14\0\1\7\3\0\1\7"+
    "\1\0\3\7\1\370\61\7\14\0\1\7\3\0\1\7"+
    "\1\0\2\7\1\371\62\7\14\0\1\7\3\0\1\7"+
    "\1\0\6\7\1\372\56\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\373\64\7\14\0\1\7\3\0\1\7\1\0"+
    "\10\7\1\374\54\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\175\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\25\7\1\375\37\7\14\0\1\7\3\0\1\7\1\0"+
    "\2\7\1\376\62\7\14\0\1\7\3\0\1\7\1\0"+
    "\2\7\1\377\62\7\14\0\1\7\3\0\1\7\1\0"+
    "\40\7\1\u0100\24\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\u0101\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\5\7\1\u0102\57\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\u0103\51\7\1\u0104\11\7\14\0\1\7\3\0"+
    "\1\7\1\0\16\7\1\u0105\46\7\14\0\1\7\3\0"+
    "\1\7\1\0\16\7\1\u0106\1\u0107\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\6\7\1\u0108\56\7\14\0\1\7"+
    "\3\0\1\7\1\0\20\7\1\u0109\44\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\u010a\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\16\7\1\u010b\46\7\14\0\1\7"+
    "\3\0\1\7\1\0\46\7\1\u010c\16\7\14\0\1\7"+
    "\3\0\1\7\1\0\17\7\1\u010d\45\7\14\0\1\7"+
    "\3\0\1\7\1\0\50\7\1\u010e\14\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\u010f\64\7\14\0\1\7\3\0"+
    "\1\7\1\0\45\7\1\u0110\17\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\u0111\64\7\14\0\1\7\3\0\1\7"+
    "\1\0\20\7\1\u0112\44\7\14\0\1\7\3\0\1\7"+
    "\1\0\3\7\1\u0113\61\7\14\0\1\7\3\0\1\7"+
    "\1\0\62\7\1\u0114\2\7\14\0\1\7\3\0\1\7"+
    "\1\0\55\7\1\u0115\7\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0116\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\6\7\1\u0117\56\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0118\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u0119\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\4\7\1\370\60\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\7\1\u011a\63\7\14\0\1\7\3\0\1\7"+
    "\1\0\13\7\1\u011b\51\7\14\0\1\7\3\0\1\7"+
    "\1\0\2\7\1\245\62\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u011c\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\40\7\1\u011d\24\7\14\0\1\7\3\0\1\7"+
    "\1\0\26\7\1\u011e\36\7\14\0\1\7\3\0\1\7"+
    "\1\0\31\7\1\u011f\33\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0120\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\u0121\64\7\14\0\1\7\3\0\1\7\1\0"+
    "\50\7\1\u0122\14\7\14\0\1\7\3\0\1\7\1\0"+
    "\3\7\1\u0123\37\7\1\u0124\21\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\u0125\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\7\1\u0126\63\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\u0127\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\6\7\1\u0128\7\7\1\u0129\46\7\14\0"+
    "\1\7\3\0\1\7\1\0\5\7\1\u012a\57\7\14\0"+
    "\1\7\3\0\1\7\1\0\23\7\1\u012b\41\7\14\0"+
    "\1\7\3\0\1\7\1\0\16\7\1\u012c\46\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\u012d\63\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\u012e\64\7\14\0\1\7"+
    "\3\0\1\7\1\0\21\7\1\u012f\43\7\14\0\1\7"+
    "\3\0\1\7\1\0\1\u0130\64\7\14\0\1\7\3\0"+
    "\1\7\1\0\27\7\1\u012c\35\7\14\0\1\7\3\0"+
    "\1\7\1\0\16\7\1\u0131\46\7\14\0\1\7\3\0"+
    "\1\7\1\0\7\7\1\221\55\7\14\0\1\7\3\0"+
    "\1\7\1\0\63\7\1\u0132\1\7\14\0\1\7\3\0"+
    "\1\7\1\0\16\7\1\u0133\46\7\14\0\1\7\3\0"+
    "\1\7\1\0\20\7\1\u0134\44\7\14\0\1\7\3\0"+
    "\1\7\1\0\5\7\1\u0135\57\7\14\0\1\7\3\0"+
    "\1\7\1\0\5\7\1\u0136\57\7\14\0\1\7\3\0"+
    "\1\7\1\0\22\7\1\u0137\42\7\14\0\1\7\3\0"+
    "\1\7\1\0\21\7\1\u0138\43\7\14\0\1\7\3\0"+
    "\1\7\1\0\62\7\1\u0139\2\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\u013a\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\26\7\1\u013b\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\26\7\1\u013c\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\16\7\1\u0122\46\7\14\0\1\7\3\0"+
    "\1\7\1\0\42\7\1\u013d\22\7\14\0\1\7\3\0"+
    "\1\7\1\0\2\7\1\u013e\62\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\u013f\64\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0140\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0141\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0142\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0143\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\27\7\1\u0144\35\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u0145\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u0146\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u0147\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\317\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\3\7\1\u012c\61\7\14\0\1\7\3\0\1\7"+
    "\1\0\43\7\1\u012c\21\7\14\0\1\7\3\0\1\7"+
    "\1\0\52\7\1\u0148\12\7\14\0\1\7\3\0\1\7"+
    "\1\0\31\7\1\u0149\33\7\14\0\1\7\3\0\1\7"+
    "\1\0\23\7\1\u014a\41\7\14\0\1\7\3\0\1\7"+
    "\1\0\20\7\1\u014b\44\7\14\0\1\7\3\0\1\7"+
    "\1\0\17\7\1\u014c\45\7\14\0\1\7\3\0\1\7"+
    "\1\0\22\7\1\u014d\42\7\14\0\1\7\3\0\1\7"+
    "\1\0\10\7\1\u014e\54\7\14\0\1\7\3\0\1\7"+
    "\1\0\10\7\1\u014f\54\7\14\0\1\7\3\0\1\7"+
    "\1\0\14\7\1\u0150\50\7\14\0\1\7\3\0\1\7"+
    "\1\0\63\7\1\u0151\1\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\245\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\26\7\1\u0152\36\7\14\0\1\7\3\0\1\7"+
    "\1\0\5\7\1\u0153\57\7\14\0\1\7\3\0\1\7"+
    "\1\0\4\7\1\u0154\60\7\14\0\1\7\3\0\1\7"+
    "\1\0\32\7\1\342\32\7\14\0\1\7\3\0\1\7"+
    "\1\0\31\7\1\u0155\33\7\14\0\1\7\3\0\1\7"+
    "\1\0\25\7\1\u0156\37\7\14\0\1\7\3\0\1\7"+
    "\1\0\22\7\1\u0157\42\7\14\0\1\7\3\0\1\7"+
    "\1\0\21\7\1\u0158\43\7\14\0\1\7\3\0\1\7"+
    "\1\0\5\7\1\u0122\57\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u0159\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\27\7\1\u011f\35\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\7\1\u015a\63\7\14\0\1\7\3\0\1\7"+
    "\1\0\20\7\1\u015b\44\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u015c\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\16\7\1\u015d\46\7\14\0\1\7\3\0\1\7"+
    "\1\0\23\7\1\317\41\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\u015e\64\7\14\0\1\7\3\0\1\7\1\0"+
    "\31\7\1\u015f\33\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\u0160\64\7\14\0\1\7\3\0\1\7\1\0\21\7"+
    "\1\u0161\1\u0162\3\7\1\u0163\36\7\14\0\1\7\3\0"+
    "\1\7\1\0\1\u0164\64\7\14\0\1\7\3\0\1\7"+
    "\1\0\5\7\1\u0165\57\7\14\0\1\7\3\0\1\7"+
    "\1\0\1\u0166\64\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\u0167\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\u0168\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\5\7\1\u0169\57\7\14\0\1\7\3\0\1\7\1\0"+
    "\17\7\1\u016a\45\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\u016b\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\u016c\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\3\7\1\u016d\61\7\14\0\1\7\3\0\1\7\1\0"+
    "\55\7\1\u011f\7\7\14\0\1\7\3\0\1\7\1\0"+
    "\20\7\1\u016e\44\7\14\0\1\7\3\0\1\7\1\0"+
    "\23\7\1\u016f\41\7\14\0\1\7\3\0\1\7\1\0"+
    "\43\7\1\u0170\21\7\14\0\1\7\3\0\1\7\1\0"+
    "\23\7\1\u0171\41\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\u0172\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\u0173\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\16\7\1\u0174\46\7\14\0\1\7\3\0\1\7\1\0"+
    "\25\7\1\u0175\37\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\7\1\363\63\7\14\0\1\7\3\0\1\7\1\0"+
    "\1\u0176\64\7\14\0\1\7\3\0\1\7\1\0\3\7"+
    "\1\u0177\61\7\14\0\1\7\3\0\1\7\1\0\3\7"+
    "\1\u0178\61\7\14\0\1\7\3\0\1\7\1\0\5\7"+
    "\1\u0179\57\7\14\0\1\7\3\0\1\7\1\0\2\7"+
    "\1\u017a\62\7\14\0\1\7\3\0\1\7\1\0\2\7"+
    "\1\u017b\62\7\14\0\1\7\3\0\1\7\1\0\20\7"+
    "\1\u0122\44\7\14\0\1\7\3\0\1\7\1\0\16\7"+
    "\1\u016c\46\7\14\0\1\7\3\0\1\7\1\0\23\7"+
    "\1\u017c\41\7\14\0\1\7\3\0\1\7\1\0\2\7"+
    "\1\u017d\62\7\14\0\1\7\3\0\1\7\1\0\15\7"+
    "\1\u017e\47\7\14\0\1\7\3\0\1\7\1\0\10\7"+
    "\1\u017f\54\7\14\0\1\7\3\0\1\7\1\0\21\7"+
    "\1\u0171\43\7\14\0\1\7\3\0\1\7\1\0\2\7"+
    "\1\u0180\62\7\14\0\1\7\3\0\1\7\1\0\5\7"+
    "\1\363\57\7\14\0\1\7\3\0\1\7\1\0\2\7"+
    "\1\363\62\7\14\0\1\7\3\0\1\7\1\0\3\7"+
    "\1\u0181\61\7\14\0\1\7\3\0\1\7\1\0\17\7"+
    "\1\u0182\45\7\14\0\1\7\3\0\1\7\1\0\7\7"+
    "\1\u0122\55\7\14\0\1\7\3\0\1\7\1\0\23\7"+
    "\1\u0122\41\7\14\0\1\7\3\0\1\7\1\0\46\7"+
    "\1\u0183\16\7\14\0\1\7\3\0\1\7\1\0\17\7"+
    "\1\u0184\45\7\14\0\1\7\3\0\1\7\1\0\1\u0185"+
    "\64\7\14\0\1\7\3\0\1\7\1\0\17\7\1\u0186"+
    "\45\7\14\0\1\7\3\0\1\7\1\0\21\7\1\u0187"+
    "\43\7\14\0\1\7\3\0\1\7\1\0\10\7\1\u0188"+
    "\54\7\14\0\1\7\3\0\1\7\1\0\17\7\1\u0189"+
    "\45\7\14\0\1\7\3\0\1\7\1\0\2\7\1\u018a"+
    "\62\7\14\0\1\7\3\0\1\7\1\0\20\7\1\u018b"+
    "\44\7\14\0\1\7\3\0\1\7\1\0\54\7\1\u018c"+
    "\10\7\14\0\1\7\3\0\1\7\1\0\6\7\1\u018d"+
    "\56\7\14\0\1\7\3\0\1\7\1\0\31\7\1\u018e"+
    "\33\7\14\0\1\7\3\0\1\7\1\0\16\7\1\u0175"+
    "\46\7\14\0\1\7\3\0\1\7\1\0\16\7\1\u018f"+
    "\46\7\14\0\1\7\3\0\1\7\1\0\2\7\1\u0190"+
    "\62\7\14\0\1\7\3\0\1\7\1\0\1\u0191\64\7"+
    "\14\0\1\7\3\0\1\7\1\0\6\7\1\u0192\56\7"+
    "\14\0\1\7\3\0\1\7\1\0\17\7\1\u0193\45\7"+
    "\14\0\1\7\3\0\1\7\1\0\1\7\1\317\63\7"+
    "\14\0\1\7\3\0\1\7\1\0\26\7\1\317\36\7"+
    "\14\0\1\7\3\0\1\7\1\0\24\7\1\363\40\7"+
    "\14\0\1\7\3\0\1\7\1\0\1\u0194\64\7\14\0"+
    "\1\7\3\0\1\7\1\0\6\7\1\246\56\7\14\0"+
    "\1\7\3\0\1\7\1\0\27\7\1\u0195\35\7\14\0"+
    "\1\7\3\0\1\7\1\0\23\7\1\u0196\41\7\14\0"+
    "\1\7\3\0\1\7\1\0\6\7\1\u0197\56\7\14\0"+
    "\1\7\3\0\1\7\1\0\16\7\1\u0198\46\7\14\0"+
    "\1\7\3\0\1\7\1\0\30\7\1\u0122\34\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\u0199\63\7\14\0"+
    "\1\7\3\0\1\7\1\0\1\7\1\u0122\63\7\14\0"+
    "\1\7\3\0\1\7\1\0\34\7\1\u019a\30\7\14\0"+
    "\1\7\3\0\1\7\1\0\41\7\1\317\23\7\14\0"+
    "\1\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26909];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\3\11\6\1\3\11\57\1\4\11"+
    "\1\1\1\11\53\1\1\0\45\1\1\11\347\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[410];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TEALLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TEALLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 45: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 3: 
            { return EOF;
            } 
            // fall through
          case 47: break;
          case 4: 
            { return DIVIDE;
            } 
            // fall through
          case 48: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 49: break;
          case 6: 
            { return FLOWCONTROL_OP;
            } 
            // fall through
          case 50: break;
          case 7: 
            { return NUMBER;
            } 
            // fall through
          case 51: break;
          case 8: 
            { return PLUS;
            } 
            // fall through
          case 52: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 53: break;
          case 10: 
            { return TIMES;
            } 
            // fall through
          case 54: break;
          case 11: 
            { return LESSTHAN;
            } 
            // fall through
          case 55: break;
          case 12: 
            { return GREATERTHAN;
            } 
            // fall through
          case 56: break;
          case 13: 
            { return BITWISE_AND;
            } 
            // fall through
          case 57: break;
          case 14: 
            { return NOT;
            } 
            // fall through
          case 58: break;
          case 15: 
            { return MODULO;
            } 
            // fall through
          case 59: break;
          case 16: 
            { return BITWISE_XOR;
            } 
            // fall through
          case 60: break;
          case 17: 
            { return BITWISE_INVERT;
            } 
            // fall through
          case 61: break;
          case 18: 
            { return COMMENT;
            } 
            // fall through
          case 62: break;
          case 19: 
            { return LESSTHANEQUAL;
            } 
            // fall through
          case 63: break;
          case 20: 
            { return GREATERTHANEQUAL;
            } 
            // fall through
          case 64: break;
          case 21: 
            { return LOGICAL_EQUAL;
            } 
            // fall through
          case 65: break;
          case 22: 
            { return LOGICAL_AND;
            } 
            // fall through
          case 66: break;
          case 23: 
            { return BITWISE_OR;
            } 
            // fall through
          case 67: break;
          case 24: 
            { return LOGICAL_NOTEQUAL;
            } 
            // fall through
          case 68: break;
          case 25: 
            { return LOADING_OP;
            } 
            // fall through
          case 69: break;
          case 26: 
            { return LEN;
            } 
            // fall through
          case 70: break;
          case 27: 
            { return TYPENUM_CONSTANT;
            } 
            // fall through
          case 71: break;
          case 28: 
            { return ITOB;
            } 
            // fall through
          case 72: break;
          case 29: 
            { return BTOI;
            } 
            // fall through
          case 73: break;
          case 30: 
            { return ADDW;
            } 
            // fall through
          case 74: break;
          case 31: 
            { return MULW;
            } 
            // fall through
          case 75: break;
          case 32: 
            { return NAMED_INTEGER_CONSTANT;
            } 
            // fall through
          case 76: break;
          case 33: 
            { return LOGICAL_OR;
            } 
            // fall through
          case 77: break;
          case 34: 
            { return GLOBAL_FIELD;
            } 
            // fall through
          case 78: break;
          case 35: 
            { return CONCAT;
            } 
            // fall through
          case 79: break;
          case 36: 
            { return SHA256;
            } 
            // fall through
          case 80: break;
          case 37: 
            { return STATEACCESS_OP;
            } 
            // fall through
          case 81: break;
          case 38: 
            { return ASSET_FIELD_1;
            } 
            // fall through
          case 82: break;
          case 39: 
            { return KECCAK256;
            } 
            // fall through
          case 83: break;
          case 40: 
            { return SUBSTRING;
            } 
            // fall through
          case 84: break;
          case 41: 
            { return SUBSTRING3;
            } 
            // fall through
          case 85: break;
          case 42: 
            { return SHA512_256;
            } 
            // fall through
          case 86: break;
          case 43: 
            { return ASSET_FIELD;
            } 
            // fall through
          case 87: break;
          case 44: 
            { return ED25519VERIFY;
            } 
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
