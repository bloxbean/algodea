/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.bloxbean.algodea.idea.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.bloxbean.algodea.idea.language.psi.TEALTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_TEALLexer.flex</tt>
 */
public class _TEALLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\107\1\11\1\113\1\73\1\110\1\105\1\7\2\0\1\102\1\100"+
    "\1\0\1\101\1\73\1\4\1\5\1\23\1\24\1\25\1\6\1\75\1\76\2\6\1\77\1\114\1\0\1"+
    "\103\1\74\1\104\2\73\1\52\1\63\1\47\1\53\1\72\1\61\1\65\1\67\1\46\1\73\1\56"+
    "\1\64\1\62\1\44\1\45\1\55\1\73\1\57\1\50\1\60\1\51\1\66\1\73\1\71\1\73\1\3"+
    "\1\0\1\10\1\0\1\111\1\22\1\0\1\30\1\16\1\15\1\33\1\27\1\54\1\32\1\37\1\12"+
    "\1\73\1\21\1\17\1\43\1\13\1\20\1\35\1\73\1\31\1\34\1\14\1\36\1\70\1\41\1\42"+
    "\1\26\1\40\1\0\1\106\1\0\1\112\6\0\1\1\32\0\1\2\337\0\1\2\177\0\13\2\35\0"+
    "\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\2\1\4\6"+
    "\1\7\32\6\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\6\1\23\1\6"+
    "\1\24\1\25\1\26\1\0\1\27\3\0\10\6\1\7"+
    "\60\6\1\30\1\31\1\32\1\33\1\34\1\35\2\6"+
    "\1\36\1\6\1\37\5\6\1\40\4\6\1\41\11\6"+
    "\1\7\5\6\1\42\32\6\1\41\1\43\1\37\1\6"+
    "\1\44\1\45\1\6\1\41\4\6\1\46\1\47\4\6"+
    "\1\37\13\6\1\50\1\51\65\6\1\52\13\6\1\53"+
    "\7\6\1\54\1\6\1\55\2\6\1\56\40\6\1\57"+
    "\7\6\1\60\1\61\35\6\1\62\1\63\22\6\1\64"+
    "\23\6\1\65\5\6\1\66\34\6\1\67\1\70\17\6"+
    "\1\71\14\6\1\72\27\6\1\73\1\6\1\57\35\6";

  private static int [] zzUnpackAction() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\u0181\0\u01ce\0\u021b"+
    "\0\u0268\0\u02b5\0\u0302\0\u034f\0\u039c\0\u03e9\0\u0436\0\u0483"+
    "\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604\0\u0651\0\u069e\0\u06eb"+
    "\0\u0738\0\u0785\0\u07d2\0\u081f\0\u086c\0\u08b9\0\u0906\0\u0953"+
    "\0\u09a0\0\u09ed\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb"+
    "\0\u0302\0\u0302\0\115\0\u0c08\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c"+
    "\0\115\0\115\0\u0302\0\u0d89\0\115\0\u0dd6\0\u0e23\0\u0e70"+
    "\0\u0ebd\0\u021b\0\115\0\u0f0a\0\u0268\0\u0f57\0\u0fa4\0\u0ff1"+
    "\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172\0\u11bf\0\u0302\0\u120c"+
    "\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da\0\u1427\0\u1474"+
    "\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642\0\u168f\0\u16dc"+
    "\0\u1729\0\u1776\0\u17c3\0\u1810\0\u185d\0\u18aa\0\u18f7\0\u1944"+
    "\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5\0\u1b12\0\u1b5f\0\u1bac"+
    "\0\u1bf9\0\u1c46\0\u1c93\0\u1ce0\0\u1d2d\0\u1d7a\0\u1dc7\0\u1e14"+
    "\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2\0\u202f\0\u0302"+
    "\0\115\0\115\0\115\0\115\0\115\0\u207c\0\u20c9\0\u2116"+
    "\0\u2163\0\u21b0\0\u21fd\0\u224a\0\u2297\0\u22e4\0\u2331\0\u0302"+
    "\0\u237e\0\u23cb\0\u2418\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599"+
    "\0\u25e6\0\u2633\0\u2680\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u2801"+
    "\0\u284e\0\u289b\0\u28e8\0\u2935\0\u0302\0\u2982\0\u29cf\0\u2a1c"+
    "\0\u2a69\0\u2ab6\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84"+
    "\0\u2cd1\0\u2d1e\0\u2d6b\0\u2db8\0\u2e05\0\u2e52\0\u2e9f\0\u2eec"+
    "\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u306d\0\u30ba\0\u3107\0\u3154"+
    "\0\u0302\0\u0302\0\u31a1\0\u0302\0\u2116\0\u31ee\0\u0302\0\u323b"+
    "\0\u3288\0\u32d5\0\u3322\0\u0302\0\u0302\0\u336f\0\u33bc\0\u3409"+
    "\0\u3456\0\u34a3\0\u34f0\0\u353d\0\u358a\0\u35d7\0\u3624\0\u3671"+
    "\0\u36be\0\u370b\0\u3758\0\u37a5\0\u37f2\0\u0302\0\u0302\0\u383f"+
    "\0\u388c\0\u38d9\0\u3926\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7"+
    "\0\u3af4\0\u3b41\0\u3b8e\0\u3bdb\0\u3c28\0\u3c75\0\u3cc2\0\u3d0f"+
    "\0\u3d5c\0\u3da9\0\u3df6\0\u3e43\0\u3e90\0\u3edd\0\u3f2a\0\u3f77"+
    "\0\u3fc4\0\u4011\0\u405e\0\u40ab\0\u40f8\0\u4145\0\u4192\0\u41df"+
    "\0\u422c\0\u4279\0\u42c6\0\u4313\0\u4360\0\u43ad\0\u43fa\0\u4447"+
    "\0\u4494\0\u44e1\0\u452e\0\u457b\0\u45c8\0\u4615\0\u4662\0\u46af"+
    "\0\u46fc\0\u4749\0\u4796\0\u47e3\0\u0302\0\u4830\0\u487d\0\u48ca"+
    "\0\u4917\0\u4964\0\u49b1\0\u49fe\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32"+
    "\0\u0302\0\u4b7f\0\u4bcc\0\u4c19\0\u4c66\0\u4cb3\0\u4d00\0\u4d4d"+
    "\0\u0302\0\u4d9a\0\u0302\0\u4de7\0\u4e34\0\u0302\0\u4e81\0\u4ece"+
    "\0\u4f1b\0\u4f68\0\u4fb5\0\u5002\0\u504f\0\u509c\0\u50e9\0\u5136"+
    "\0\u5183\0\u51d0\0\u521d\0\u526a\0\u52b7\0\u5304\0\u5351\0\u539e"+
    "\0\u53eb\0\u5438\0\u5485\0\u54d2\0\u551f\0\u556c\0\u55b9\0\u5606"+
    "\0\u5653\0\u56a0\0\u56ed\0\u573a\0\u5787\0\u57d4\0\u0302\0\u5821"+
    "\0\u586e\0\u58bb\0\u5908\0\u5955\0\u59a2\0\u59ef\0\u0302\0\u0302"+
    "\0\u5a3c\0\u5a89\0\u5ad6\0\u5b23\0\u5b70\0\u5bbd\0\u5c0a\0\u5c57"+
    "\0\u5ca4\0\u5cf1\0\u5d3e\0\u5d8b\0\u5dd8\0\u5e25\0\u5e72\0\u5ebf"+
    "\0\u5f0c\0\u5f59\0\u5fa6\0\u5ff3\0\u6040\0\u608d\0\u60da\0\u6127"+
    "\0\u6174\0\u61c1\0\u620e\0\u625b\0\u62a8\0\u0302\0\u0302\0\u62f5"+
    "\0\u6342\0\u638f\0\u63dc\0\u6429\0\u6476\0\u64c3\0\u6510\0\u655d"+
    "\0\u65aa\0\u65f7\0\u6644\0\u6691\0\u66de\0\u672b\0\u6778\0\u67c5"+
    "\0\u6812\0\u0302\0\u685f\0\u68ac\0\u68f9\0\u6946\0\u6993\0\u69e0"+
    "\0\u6a2d\0\u6a7a\0\u6ac7\0\u6b14\0\u6b61\0\u6bae\0\u6bfb\0\u6c48"+
    "\0\u6c95\0\u6ce2\0\u6d2f\0\u6d7c\0\u6dc9\0\u0302\0\u6e16\0\u6e63"+
    "\0\u6eb0\0\u6efd\0\u6f4a\0\u6f97\0\u6fe4\0\u7031\0\u707e\0\u70cb"+
    "\0\u7118\0\u7165\0\u71b2\0\u71ff\0\u724c\0\u7299\0\u72e6\0\u7333"+
    "\0\u7380\0\u73cd\0\u741a\0\u7467\0\u74b4\0\u7501\0\u754e\0\u759b"+
    "\0\u75e8\0\u7635\0\u7682\0\u76cf\0\u771c\0\u7769\0\u77b6\0\u7803"+
    "\0\u0302\0\u0302\0\u7850\0\u789d\0\u78ea\0\u7937\0\u7984\0\u79d1"+
    "\0\u7a1e\0\u7a6b\0\u7ab8\0\u7b05\0\u7b52\0\u7b9f\0\u7bec\0\u7c39"+
    "\0\u7c86\0\u7635\0\u7cd3\0\u7d20\0\u7d6d\0\u7dba\0\u7e07\0\u7e54"+
    "\0\u7ea1\0\u7eee\0\u7f3b\0\u7f88\0\u7fd5\0\u8022\0\u0302\0\u806f"+
    "\0\u80bc\0\u8109\0\u8156\0\u81a3\0\u81f0\0\u823d\0\u828a\0\u82d7"+
    "\0\u8324\0\u8371\0\u83be\0\u840b\0\u8458\0\u84a5\0\u84f2\0\u853f"+
    "\0\u858c\0\u85d9\0\u8626\0\u8673\0\u86c0\0\u870d\0\u0302\0\u875a"+
    "\0\u87a7\0\u87f4\0\u8841\0\u888e\0\u88db\0\u8928\0\u8975\0\u89c2"+
    "\0\u8a0f\0\u8a5c\0\u8aa9\0\u8af6\0\u8b43\0\u8b90\0\u8bdd\0\u8c2a"+
    "\0\u8c77\0\u8cc4\0\u8d11\0\u8d5e\0\u8dab\0\u8df8\0\u8e45\0\u8e92"+
    "\0\u8edf\0\u8f2c\0\u8f79\0\u8fc6\0\u9013\0\u9060";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\13"+
    "\1\20\1\13\3\7\1\13\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\4\13\1\31\1\32\1\33"+
    "\1\13\1\34\1\13\1\35\1\36\1\37\1\13\1\40"+
    "\1\41\1\42\2\13\1\43\1\13\1\44\1\45\1\46"+
    "\1\13\1\47\3\13\1\50\3\7\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\116\0\2\3\115\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\66\52\13\10\0\2\13\5\0\1\67"+
    "\113\0\1\13\1\0\2\70\3\0\11\13\3\70\14\13"+
    "\1\71\26\13\1\71\3\13\3\70\2\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\7\3\0\11\13\3\7\47\13"+
    "\3\7\2\13\10\0\2\13\1\0\7\72\1\73\1\74"+
    "\104\72\10\75\1\76\1\73\103\75\3\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\77\1\100\65\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\70\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\30\13\1\101\37\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\102\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\103\1\104\11\13\1\105\1\13\1\106"+
    "\7\13\1\107\41\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\6\13\1\110\6\13\1\111\52\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\112"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\17\13\1\113\1\13\1\114\46\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\3\13\1\115\13\13\1\116"+
    "\1\13\1\117\1\120\1\121\4\13\1\122\11\13\1\123"+
    "\25\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\124\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\125\2\13\1\126\7\13\1\127"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\130\23\13\1\131\43\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\2\13\1\132\12\13\1\133\6\13"+
    "\1\134\1\135\1\13\1\136\40\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\6\13\1\137\7\13\1\140"+
    "\5\13\1\141\43\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\142\66\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\143\23\13\1\144\43\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\145\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\23\13\1\146\44\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\5\13\1\147\11\13\1\150\4\13"+
    "\1\151\43\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\142\21\13\1\152\44\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\22\13\1\153\1\154"+
    "\44\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\155\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\16\13\1\156\51\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\15\13\1\157\52\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\6\13\1\160"+
    "\61\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\161\15\13\1\162\51\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\6\13\1\163\7\13\1\164\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\17\13"+
    "\1\165\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\40\13\1\166\27\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\167\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\62\13\1\170\5\13"+
    "\10\0\2\13\75\0\1\171\114\0\1\172\125\0\1\173"+
    "\115\0\1\174\102\0\1\175\23\0\1\13\1\0\2\13"+
    "\3\0\23\13\1\176\44\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\177\50\13\10\0\2\13"+
    "\1\0\1\67\1\0\113\67\3\0\1\13\1\0\2\70"+
    "\3\0\11\13\3\70\47\13\3\70\2\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\71\3\0\3\13\2\71\4\13"+
    "\3\71\1\13\2\71\2\13\1\71\13\13\1\71\2\13"+
    "\3\71\4\13\1\71\1\13\1\71\6\13\1\71\2\13"+
    "\3\71\2\13\10\0\2\13\1\0\1\72\1\0\113\72"+
    "\1\75\1\0\113\75\3\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\200\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\6\13\1\201\61\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\13\1\202\66\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\1\13\1\203"+
    "\66\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\26\13\1\107\41\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\6\13\1\204\61\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\205\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\5\13\1\206"+
    "\62\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\207\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\210\66\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\3\13\1\211\10\13\1\212"+
    "\53\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\17\13\1\107\50\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\12\13\1\213\55\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\42\13\1\214\25\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\20\13\1\215"+
    "\47\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\21\13\1\216\46\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\22\13\1\217\45\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\23\13\1\220\44\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\42\13\1\221"+
    "\25\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\17\13\1\222\50\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\223\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\30\13\1\224\37\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\6\13\1\225"+
    "\61\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\226\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\20\13\1\107\47\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\23\13\1\227\44\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\6\13\1\230"+
    "\61\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\231\2\13\1\232\62\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\4\13\1\233\63\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\234"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\137\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\23\13\1\107\44\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\14\13\1\235\53\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\22\13\1\236"+
    "\45\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\7\13\1\237\60\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\240\66\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\5\13\1\241\62\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\33\13\1\242"+
    "\34\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\243\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\6\13\1\244\6\13\1\245\52\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\246"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\17\13\1\247\50\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\21\13\1\250\46\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\22\13\1\251\45\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\23\13\1\252"+
    "\44\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\5\13\1\253\62\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\14\13\1\254\53\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\14\13\1\255\53\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\24\13\1\256"+
    "\43\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\13\1\257\66\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\30\13\1\260\37\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\20\13\1\261\47\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\2\13\1\262"+
    "\65\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\6\13\1\263\61\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\45\13\1\264\22\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\17\13\1\265\50\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\17\13\1\266"+
    "\50\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\6\13\1\267\61\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\3\13\1\270\64\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\4\13\1\271\63\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\272"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\3\13\1\273\64\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\274\67\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\275\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\276\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\21\13"+
    "\1\277\46\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\3\13\1\300\64\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\301\50\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\63\13\1\302\4\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\20\13"+
    "\1\235\47\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\10\13\1\303\57\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\304\7\13\1\305\40\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\15\13"+
    "\1\306\52\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\5\13\1\235\2\13\1\307\57\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\15\13\1\310\52\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\26\13"+
    "\1\235\41\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\24\13\1\311\43\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\312\66\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\4\13\1\313\63\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\4\13"+
    "\1\314\63\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\12\13\1\107\55\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\315\50\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\4\13\1\316\63\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\15\13"+
    "\1\317\52\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\22\13\1\320\45\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\12\13\1\321\50\13\1\322\4\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\25\13"+
    "\1\323\42\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\324\66\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\10\13\1\325\57\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\27\13\1\326\40\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\23\13"+
    "\1\327\44\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\34\13\1\330\33\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\22\13\1\331\45\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\332\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\333\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\17\13\1\334\50\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\335\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\15\13\1\336\52\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\5\13"+
    "\1\337\62\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\335\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\31\13\1\340\36\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\45\13\1\341\22\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\342\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\46\13\1\343\2\13\1\344\16\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\46\13\1\345\21\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\346"+
    "\67\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\347\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\24\13\1\350\43\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\10\13\1\351\57\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\22\13\1\352"+
    "\45\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\353\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\40\13\1\354\27\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\4\13\1\355\3\13\1\303"+
    "\57\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\356\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\357\66\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\16\13\1\360\51\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\214"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\63\13\1\361\4\13\10\0\2\13\4\0\1\13\1\0"+
    "\1\277\1\13\3\0\11\13\3\277\54\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\2\13\1\362\14\13"+
    "\1\363\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\5\13\1\364\1\365\11\13\1\366\47\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\17\13\1\235"+
    "\50\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\17\13\1\367\50\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\16\13\1\272\3\13\1\202\45\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\370"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\371\13\13\1\372\53\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\277\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\373\13\13\1\374"+
    "\53\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\3\13\1\363\64\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\375\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\63\13\1\376\4\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\11\13\1\377"+
    "\56\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\u0100\3\13\1\u0101\63\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\6\13\1\u0102\61\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\4\13\1\u0103\63\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\327\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u0104\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\17\13\1\u0105\50\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\2\13\1\u0106\65\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\15\13"+
    "\1\u0107\52\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\2\13\1\u0108\65\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\2\13\1\u0109\65\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\u010a\67\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\u010b"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\u010c\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\21\13\1\u010d\46\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\30\13\1\u010e\37\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\u010f"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\30\13\1\u0110\37\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\3\13\1\u0111\64\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\22\13\1\u0112\45\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\23\13\1\u0113"+
    "\44\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\46\13\1\u0114\21\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\u0115\67\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\20\13\1\u0116\47\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\21\13\1\u0117\46\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\5\13"+
    "\1\u0118\62\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\2\13\1\u0119\65\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\3\13\1\u011a\64\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\7\13\1\u011b\60\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\11\13"+
    "\1\u011c\56\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\10\13\1\u011d\57\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\2\13\1\107\65\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\6\13\1\u011e\61\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\23\13"+
    "\1\u011f\44\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\5\13\1\u0120\62\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\107\66\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\5\13\1\277\62\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\2\13"+
    "\1\u0121\65\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\2\13\1\u0122\65\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\2\13\1\u0123\65\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\2\13\1\u0124\65\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\17\13"+
    "\1\u0125\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\64\13\1\u0126\3\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\12\13\1\u0127\55\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\13\1\u0128\66\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\14\13"+
    "\1\u0129\53\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\27\13\1\u012a\40\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\106\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\33\13\1\u012b\34\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\36\13"+
    "\1\u012c\31\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\6\13\1\u012d\61\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\u012e\66\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\15\13\1\u012f\52\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\32\13"+
    "\1\u0130\2\13\1\u0131\1\13\1\u0132\1\13\1\u0133\3\13"+
    "\1\u0134\1\u0135\1\u0136\1\u0137\1\u0138\16\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\3\13\1\u0139\64\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u013a\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\20\13\1\u013b\47\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\u013c\66\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\5\13\1\u013d\62\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u013e\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\36\13\1\u013f\31\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\2\13\1\u0140\65\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\36\13\1\u0141\31\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\50\13"+
    "\1\u0142\17\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\6\13\1\u0143\61\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\31\13\1\u0144\36\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\21\13\1\u0145\46\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\u0146\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u0147\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\12\13\1\u0148\55\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\65\13\1\u0149\2\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\23\13"+
    "\1\u014a\1\13\1\u014b\42\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\3\13\1\u014c\64\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\2\13\1\u014d\65\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\u014e\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u014f\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u0150\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\u0151\67\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\10\13\1\u0152"+
    "\57\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\277\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u0153\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\13\1\235\66\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\24\13\1\u0154"+
    "\43\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\u0155\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\17\13\1\267\50\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\u0156\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\40\13\1\u0157"+
    "\27\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\u0158\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\5\13\1\u0159\1\u015a\61\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\13\1\u015b\43\13"+
    "\1\u015c\22\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u015d\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u015e\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\6\13\1\u015f\10\13"+
    "\1\u0160\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\17\13\1\u0161\50\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u0162\1\u0163\51\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\u0164"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\u0165\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\235\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\u0166\67\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\47\13\1\u0167\20\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\u0168\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\52\13\1\u0169\15\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\u016a\67\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\46\13\1\u016b\21\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\1\u016c\67\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\43\13"+
    "\1\u016d\24\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\u016e\66\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\u016f\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\17\13\1\u0170\50\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\3\13"+
    "\1\u0171\64\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\63\13\1\u0172\4\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\56\13\1\u0173\11\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\u0174\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\u0175\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\16\13\1\u0176\51\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u0177\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\4\13\1\u014c\63\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u0178\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\12\13\1\u0179\55\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u017a\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\2\13\1\327\65\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\u017b\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\40\13\1\u017c\27\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\23\13\1\u017d\44\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\31\13\1\u017e\36\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\u017f\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\u0180\66\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\u0181\67\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\52\13\1\u0182\15\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\3\13\1\u0183"+
    "\36\13\1\u0184\25\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\22\13\1\u0185\45\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\u0186\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\u0187"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\6\13\1\u0188\6\13\1\u0189\52\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\u018a\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\1\13\1\u018b"+
    "\66\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\5\13\1\u018c\62\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u018d\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\22\13\1\u018e\45\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\u018f"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\13\1\u0190\66\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\u0191\67\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\20\13\1\u0192\47\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\u0193\67\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\26\13\1\u018f"+
    "\41\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\52\13\1\u0194\15\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\15\13\1\u0195\52\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\7\13\1\277\60\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\64\13\1\u0196"+
    "\3\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\u0197\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\17\13\1\u0198\50\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\5\13\1\u0199\62\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\5\13\1\u019a"+
    "\62\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\21\13\1\u019b\46\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\20\13\1\u019c\47\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\63\13\1\u019d\4\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\22\13\1\277"+
    "\45\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\u019e\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\23\13\1\u019f\44\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\23\13\1\u01a0\44\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\u0182"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\27\13\1\u01a1\40\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\42\13\1\u01a2\25\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\u01a3\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\1\u01a4\67\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\u01a5\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u01a6\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\u01a7\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\13\1\u01a8\66\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\26\13"+
    "\1\u01a9\41\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u01aa\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\u01ab\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\u01ac\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\16\13"+
    "\1\u01ad\51\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\u01ae\67\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u01af\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\15\13\1\u010d\52\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\3\13\1\u018f"+
    "\64\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\42\13\1\u018f\25\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\54\13\1\u01b0\13\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\31\13\1\u01b1\36\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\10\13\1\u01b2"+
    "\57\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\22\13\1\u01b3\45\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\17\13\1\u01b4\50\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\16\13\1\u01b5\51\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\21\13\1\u01b6"+
    "\46\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\10\13\1\u01b7\57\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\10\13\1\u01b8\57\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\13\13\1\u01b9\54\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\64\13\1\u01ba"+
    "\3\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\15\13\1\327\52\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\23\13\1\u01bb\44\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\5\13\1\u01bc\62\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\4\13\1\u01bd"+
    "\63\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\214\67\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\32\13\1\u0130\35\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\31\13\1\u01be\36\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\24\13\1\u01bf\43\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\17\13"+
    "\1\u01c0\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\5\13\1\u0182\62\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\22\13\1\122\45\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\15\13\1\u01c1\52\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\26\13"+
    "\1\u01c2\41\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\21\13\1\u01c3\46\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\20\13\1\u01c4\47\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\13\1\u01c5\66\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\6\13"+
    "\1\u01c6\61\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\17\13\1\u01c7\50\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u01c8\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\15\13\1\u01c9\52\13"+
    "\10\0\2\13\4\0\1\u01ca\1\0\2\u01ca\3\0\62\u01ca"+
    "\1\13\3\u01ca\2\13\10\0\2\u01ca\4\0\1\13\1\0"+
    "\2\13\3\0\22\13\1\u010d\45\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\u01cb\67\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\31\13\1\u01cc\36\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\u01cd"+
    "\67\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\20\13\1\u01ce\1\u01cf\1\13\1\u01d0\44\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\u01d1\67\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\5\13\1\u01d2"+
    "\62\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\u01d3\67\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\16\13\1\u01d4\51\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\u01d5\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\5\13\1\u01d6\62\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\56\13"+
    "\1\u017e\11\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\13\1\u01d7\66\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\235\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\u01d8\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\15\13"+
    "\1\u01d9\52\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\3\13\1\u01da\64\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\13\1\u01db\66\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\16\13\1\u01dc\51\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\17\13"+
    "\1\u01dd\50\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\22\13\1\u01de\45\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\42\13\1\u01df\25\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\22\13\1\u01e0\45\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u01e1\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\15\13\1\u01e2\52\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\15\13\1\u01e3\52\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\24\13\1\u01e4\43\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u0147\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\1\u01e5\67\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\3\13\1\u01e6\64\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\3\13\1\u01e7\64\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\5\13\1\u01e8"+
    "\62\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\2\13\1\u01e9\65\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u01ea\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\17\13\1\u0182\50\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\u01d7"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\35\13\1\u01eb\32\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u01ec\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\22\13\1\u01ed\45\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\2\13\1\u01ee"+
    "\65\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\14\13\1\u01ef\53\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\10\13\1\u01f0\57\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\20\13\1\u01e0\47\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\2\13\1\u01f1"+
    "\65\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\5\13\1\u0147\62\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\2\13\1\u0147\65\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\3\13\1\u01f2\64\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\u01f3"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\7\13\1\u0182\60\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\22\13\1\u0182\45\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\47\13\1\u01f4\20\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\16\13\1\u01f5"+
    "\51\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\16\13\1\u01f6\51\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\u01f7\67\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\1\u01f8\67\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\16\13\1\u01f9\51\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\20\13\1\u01fa"+
    "\47\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\10\13\1\u01fb\57\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\16\13\1\u01fc\51\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\2\13\1\u01fd\65\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\17\13\1\u01fe"+
    "\50\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\55\13\1\u01ff\12\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\5\13\1\u0200\62\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\6\13\1\u012a\61\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\6\13\1\u0201"+
    "\61\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\31\13\1\u0202\36\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\15\13\1\u01e4\52\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\15\13\1\u0203\52\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\2\13\1\u0204"+
    "\65\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\1\u0205\67\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\6\13\1\u0206\61\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\16\13\1\u0207\51\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\5\13\1\235\62\13"+
    "\10\0\2\13\4\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\u010d\66\13\10\0\2\13\4\0\1\13\1\0\2\13"+
    "\3\0\23\13\1\u010d\44\13\10\0\2\13\4\0\1\13"+
    "\1\0\2\13\3\0\30\13\1\u0147\37\13\10\0\2\13"+
    "\4\0\1\13\1\0\2\13\3\0\1\u0208\67\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\6\13\1\330"+
    "\61\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\26\13\1\u0209\41\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\22\13\1\u020a\45\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\6\13\1\u020b\61\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\15\13\1\u020c"+
    "\52\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\25\13\1\u0182\42\13\10\0\2\13\4\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\u020d\66\13\10\0\2\13\4\0"+
    "\1\13\1\0\2\13\3\0\1\13\1\u0182\66\13\10\0"+
    "\2\13\4\0\1\13\1\0\2\13\3\0\34\13\1\u020e"+
    "\33\13\10\0\2\13\4\0\1\13\1\0\2\13\3\0"+
    "\41\13\1\u010d\26\13\10\0\2\13\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37037];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\50\1\1\11\5\1\2\11\2\1\1\11"+
    "\4\1\1\0\1\11\3\0\72\1\5\11\u0191\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[526];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _TEALLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _TEALLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 60: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 3: 
            { return EOF;
            } 
            // fall through
          case 62: break;
          case 4: 
            { return DIVIDE;
            } 
            // fall through
          case 63: break;
          case 5: 
            { return L_INTEGER;
            } 
            // fall through
          case 64: break;
          case 6: 
            { return ID;
            } 
            // fall through
          case 65: break;
          case 7: 
            { return FLOWCONTROL_OP;
            } 
            // fall through
          case 66: break;
          case 8: 
            { return PLUS;
            } 
            // fall through
          case 67: break;
          case 9: 
            { return MINUS;
            } 
            // fall through
          case 68: break;
          case 10: 
            { return TIMES;
            } 
            // fall through
          case 69: break;
          case 11: 
            { return LESSTHAN;
            } 
            // fall through
          case 70: break;
          case 12: 
            { return GREATERTHAN;
            } 
            // fall through
          case 71: break;
          case 13: 
            { return BITWISE_AND;
            } 
            // fall through
          case 72: break;
          case 14: 
            { return BITWISE_OR;
            } 
            // fall through
          case 73: break;
          case 15: 
            { return NOT;
            } 
            // fall through
          case 74: break;
          case 16: 
            { return MODULO;
            } 
            // fall through
          case 75: break;
          case 17: 
            { return BITWISE_XOR;
            } 
            // fall through
          case 76: break;
          case 18: 
            { return BITWISE_INVERT;
            } 
            // fall through
          case 77: break;
          case 19: 
            { return COLON;
            } 
            // fall through
          case 78: break;
          case 20: 
            { return COMMENT;
            } 
            // fall through
          case 79: break;
          case 21: 
            { return OCTAL;
            } 
            // fall through
          case 80: break;
          case 22: 
            { return HEX;
            } 
            // fall through
          case 81: break;
          case 23: 
            { return L_STRING;
            } 
            // fall through
          case 82: break;
          case 24: 
            { return LOGICAL_EQUAL;
            } 
            // fall through
          case 83: break;
          case 25: 
            { return LESSTHANEQUAL;
            } 
            // fall through
          case 84: break;
          case 26: 
            { return GREATERTHANEQUAL;
            } 
            // fall through
          case 85: break;
          case 27: 
            { return LOGICAL_AND;
            } 
            // fall through
          case 86: break;
          case 28: 
            { return LOGICAL_OR;
            } 
            // fall through
          case 87: break;
          case 29: 
            { return LOGICAL_NOTEQUAL;
            } 
            // fall through
          case 88: break;
          case 30: 
            { return INT;
            } 
            // fall through
          case 89: break;
          case 31: 
            { return TXN_LOADING_OP;
            } 
            // fall through
          case 90: break;
          case 32: 
            { return LEN;
            } 
            // fall through
          case 91: break;
          case 33: 
            { return LOADING_OP;
            } 
            // fall through
          case 92: break;
          case 34: 
            { return TYPENUM_CONSTANT;
            } 
            // fall through
          case 93: break;
          case 35: 
            { return ITOB;
            } 
            // fall through
          case 94: break;
          case 36: 
            { return BTOI;
            } 
            // fall through
          case 95: break;
          case 37: 
            { return BYTE;
            } 
            // fall through
          case 96: break;
          case 38: 
            { return ADDR;
            } 
            // fall through
          case 97: break;
          case 39: 
            { return ADDW;
            } 
            // fall through
          case 98: break;
          case 40: 
            { return MULW;
            } 
            // fall through
          case 99: break;
          case 41: 
            { return NAMED_INTEGER_CONSTANT;
            } 
            // fall through
          case 100: break;
          case 42: 
            { return GLOBAL_FIELD;
            } 
            // fall through
          case 101: break;
          case 43: 
            { return CONCAT;
            } 
            // fall through
          case 102: break;
          case 44: 
            { return GETBIT;
            } 
            // fall through
          case 103: break;
          case 45: 
            { return SETBIT;
            } 
            // fall through
          case 104: break;
          case 46: 
            { return SHA256;
            } 
            // fall through
          case 105: break;
          case 47: 
            { return STATEACCESS_OP;
            } 
            // fall through
          case 106: break;
          case 48: 
            { return GETBYTE;
            } 
            // fall through
          case 107: break;
          case 49: 
            { return SETBYTE;
            } 
            // fall through
          case 108: break;
          case 50: 
            { return VERSION;
            } 
            // fall through
          case 109: break;
          case 51: 
            { return PRAGMA_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 52: 
            { return ASSET_PARAMS_GET_FIELD;
            } 
            // fall through
          case 111: break;
          case 53: 
            { return KECCAK256;
            } 
            // fall through
          case 112: break;
          case 54: 
            { return SUBSTRING;
            } 
            // fall through
          case 113: break;
          case 55: 
            { return SUBSTRING3;
            } 
            // fall through
          case 114: break;
          case 56: 
            { return SHA512_256;
            } 
            // fall through
          case 115: break;
          case 57: 
            { return VAR_TMPL;
            } 
            // fall through
          case 116: break;
          case 58: 
            { return ASSET_HOLDING_GET_FIELD;
            } 
            // fall through
          case 117: break;
          case 59: 
            { return ED25519VERIFY;
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
